---
title: "Symbolic Computation in Theoretical Physics with Python"
description: "Part 2: SageMath"
categories: [Physics, Computational Physics]
image: "featured.png"
bibliography: references.bib
jupyter:
    kernel: SageMath-10.6
format: 
    html:
        math: true
        code-line-numbers: true
---

![](featured.png)

# SageMath

```{sage}
#| echo: false
%display latex
```

[SageMath](https://www.sagemath.org) (@sagemath) is an open-source system that
combines many powerful mathematical software packages into one interface. It
provides tools for symbolic computation, numerical analysis, plotting, and more,
making it highly useful for both research and education in mathematics, physics,
and engineering.

## Basics

Fundamental operations, symbolic computation, and core mathematical structures.

### Arithmetic operations

Support for basic arithmetic operations:

```{sage}
# Basic arithmetic operations

((3 + 5) / 8) - 2.5 ^ 3
```

###  Symbolic expressions

Support for symbolic expressions:

```{sage}
# Symbolic variables definition

var('x y')
```

```{sage}
# Symbolic expressions simplification

expr = (x^2 + x) / x
expr.simplify_full()
```

### Calculus

SageMath provides tools for symbolic calculus such as differentiation and
integration. You can compute derivatives and integrals of functions
symbolically:

```{sage}
# Define function

f = x^2 + 3 * x + 2
f
```

```{sage}
# Differentiate with respect to x

diff(f, x)
```

```{sage}
# Integrate with respect to x

integrate(f, x)
```

```{sage}
# Plot of the function

plot(f, (x, -5, 5))
```

### Differential equations

SageMath can solve differential equations symbolically:

```{sage}
# Define a differential equation

y = function('y')(x)
deqn = (diff(y, x) + y == sin(x))
deqn
```

```{sage}
# Solve the differential equation

desolve(deqn, y)
```

### Linear algebra

SageMath handles matrix operations, such as addition, multiplication, and
finding eigenvalues:

```{sage}
# Define matrix A

A = Matrix([[1, 2], [3, 4], [5, 6]])  
A
```

```{sage}
# Define matrix B

B = Matrix([[7, 8, 9], [9, 10, 11],])
B
```

```{sage}
# Matrix multiplication

A * B
```

```{sage}
# Define matrix C

C = Matrix([[1, 0], [0, 2]])  
C
```

```{sage}
# Eigenvalue equation

C.eigenvectors_right()
```

```{sage}
# Validation of eigenvalue equation

for eigenvalue, (eigenvector, *_), _ in C.eigenvectors_right():
    display((C, eigenvector, eigenvalue, C * eigenvector == eigenvalue * eigenvector))
```

### Group theory

SageMath includes tools for working with groups:

```{sage}
# Define the symmetric group S3

G = SymmetricGroup(3)
G
```

```{sage}
# Get the order of S3

G.order()
```

```{sage}
# List the elements of S3

G.list()
```

```{sage}
# Standard representation of S3

[g.matrix() for g in G]
```

### Differentiable manifolds

SageMath allows for computations in differential geometry, including tangent
vectors, differential forms, and more:

```{sage}
# Declare the spacetime manifold M

S2 = manifolds.Sphere(2)
S2
```

```{sage}
# Spherical coordinates

S2.spherical_coordinates()
```

```{sage}
# Metric

S2.metric().display()
```

## Advanced

Exploring advanced mathematics in SageMath, including group theory, manifolds,
Lie groups, and Lie algebras. This section broadly follows
[@Keski-Vakkuri2022-mx].

### Group theory

We begin by exploring finite groups, followed by an introduction to free groups
and their presentation. Finally, we examine continuous groups and group actions.

#### Smallest finite groups

We present the list of all groups of finite order $N \leq 8$.

##### Order N = 1

```{sage}
# Z1

Z1 = CyclicPermutationGroup(1)
Z1.list()
```

##### Order N = 2

```{sage}
# Z2

Z2 = CyclicPermutationGroup(2)
Z2.list()
```

```{sage}
# Z2 Cayley table

print(Z2.cayley_table())
```

```{sage}
# S2

S2 = SymmetricGroup(2)
S2.list()
```

```{sage}
# S2 Cayley table

print(S2.cayley_table())
```

```{sage}
# Z2, S2 isomorphic

assert S2.is_isomorphic(Z2)
```

##### Order N = 3

```{sage}
# Z3

Z3 = CyclicPermutationGroup(3)
Z3.list()
```

```{sage}
# Z3 Cayley table

print(Z3.cayley_table())
```

##### Order N = 4

```{sage}
# Z4

Z4 = CyclicPermutationGroup(4)
Z4.list()
```

```{sage}
# Z4 Cayley table

print(Z4.cayley_table())
```

```{sage}
# Z4 cyclic

assert Z4.is_cyclic()
```

```{sage}
# Klein four-group

K4G = direct_product_permgroups([Z2, Z2])
K4G.list()
```

```{sage}
# Klein four-group Cayley table

print(K4G.cayley_table())
```

```{sage}
# Klein four-group cyclic

assert not K4G.is_cyclic()
```

##### Order N = 5

```{sage}
# Z5

Z5 = CyclicPermutationGroup(5)
Z5.list()
```

```{sage}
# Z5 Cayley table

print(Z5.cayley_table())
```

##### Order N = 6

```{sage}
# Z6

Z6 = CyclicPermutationGroup(6)
Z6.list()
```

```{sage}
# Z6 Cayley table

print(Z6.cayley_table())
```

```{sage}
# Z2 x Z3

Z2xZ3 = direct_product_permgroups([Z2, Z3])
Z2xZ3.list()
```

```{sage}
# Z2 x Z3 Cayley table

print(Z2xZ3.cayley_table())
```

```{sage}
# S3

S3 = SymmetricGroup(3)
S3.list()
```

```{sage}
# S3 Cayley table

print(S3.cayley_table())
```

```{sage}
# Z6, Z2 x Z3 isomorphic

assert Z6.is_isomorphic(Z2xZ3)
```

```{sage}
# S3, Z6 non-isomorphic

assert not S3.is_isomorphic(Z6)
```

```{sage}
# S3, Z2 x Z3 non-isomorphic

assert not S3.is_isomorphic(Z2xZ3)
```

```{sage}
# Z6 cyclic

assert Z6.is_cyclic()
```

```{sage}
# Z2 x Z3 cyclic

assert Z2xZ3.is_cyclic()
```

```{sage}
# S3 cyclic

assert not S3.is_cyclic()
```

```{sage}
# Z6 abelian

assert Z6.is_abelian()
```

```{sage}
# Z2 x Z3 abelian

assert Z2xZ3.is_abelian()
```

```{sage}
# S3 non-abelian

assert not S3.is_abelian()
```

##### Order N = 7

```{sage}
# Z7

Z7 = CyclicPermutationGroup(7)
Z7.list()
```

```{sage}
# Z7 Cayley table

print(Z7.cayley_table())
```

##### Order N = 8

```{sage}
# Z8

Z8 = CyclicPermutationGroup(8)
Z8.list()
```

```{sage}
# Z8 Cayley table

print(Z8.cayley_table())
```

```{sage}
# Z4 x Z2

Z4xZ2 = direct_product_permgroups([Z4, Z2])
Z4xZ2.list()
```

```{sage}
# Z4xZ2 Cayley table

print(Z4xZ2.cayley_table())
```

```{sage}
# Z2 x Z2 x Z2

Z2xZ2xZ2 = direct_product_permgroups([Z2, Z2, Z2])
Z2xZ2xZ2.list()
```

```{sage}
# Z2xZ2xZ2 Cayley table

print(Z2xZ2xZ2.cayley_table())
```

```{sage}
# D4

D4 = DihedralGroup(4)
D4.list()
```

```{sage}
# D4 Cayley table

print(D4.cayley_table())
```

```{sage}
# Q

Q = QuaternionGroup()
Q.list()
```

```{sage}
# Q Cayley table

print(Q.cayley_table())
```

```{sage}
# Z8, Z4 x Z2, Z2 x Z2 x Z2, D4, Q  non-isomorphic

from itertools import combinations
groups = [Z8, Z4xZ2, Z2xZ2xZ2, D4, Q]
for group1, group2 in combinations(groups, 2):
    if not group1.is_isomorphic(group2):
        display(f'{group1}, {group2} are not isomorphic.')
```

```{sage}
# Z8 abelian

assert Z8.is_abelian()
```

```{sage}
# Z4 x Z2 abelian

assert Z4xZ2.is_abelian()
```

```{sage}
# Z2 x Z2 x Z2 abelian

assert Z2xZ2xZ2.is_abelian()
```

```{sage}
# D4 non-abelian

assert not D4.is_abelian()
```

```{sage}
# Q non-abelian

assert not Q.is_abelian()
```

```{sage}
# Q subgroups

for G in Q.subgroups():
    display(G)
```

```{sage}
# Q proper subgroups

for G in Q.subgroups():
    if G.order() == 2:
        if G.is_isomorphic(Z2) and G.is_normal():
            display(f'{G} is isomorphic to {Z2} and a normal subgroup of {Q}.')
    elif G.order() == 4:
        if G.is_isomorphic(Z4) and G.is_normal():
            display(f'{G} is isomorphic to {Z4} and a normal subgroup of {Q}.')
```

#### Symmetric groups

We present symmetric groups of different orders along with their properties.

##### Definitions

```{sage}
# S2 elements

S2 = SymmetricGroup(2)
S2.list()
```

```{sage}
# S3 elements

S3 = SymmetricGroup(3)
S3.list()
```

```{sage}
# S4 elements

S4 = SymmetricGroup(4)
S4.list()
```

```{sage}
# S5 elements

S5 = SymmetricGroup(5)
S5.list()
```

```{sage}
# S6 elements

S6 = SymmetricGroup(6)
S6.list()
```

##### Multiplication

```{sage}
# S4 elements multiplication

P = S4[5]
Q = S4[12]
print(f'P = {P}, Q = {Q}')
print(f'P * Q = {Q * P}')
```

##### Signature

```{sage}
# S4 elements signature

P = S4[16]
Q = S4[2]
print(f'P = {P}, Q = {Q}')
print(f'sgn(P) = {P.sign()}')
print(f'sgn(Q) = {Q.sign()}')
```

##### Alternating groups

```{sage}
# A4 elements

A4 = AlternatingGroup(4)
A4.list()
```

```{sage}
# A4 subgroup of S4

assert A4.is_subgroup(S4)
```

```{sage}
# A4 elements signature

assert all(e.sign() == 1 for e in A4)
```

```{sage}
# A4 order

assert A4.order() == S4.order() / 2
```

##### Cayley's theorem

Every finite group of order $N$ is isomorphic to a subgroup of $S_N$.

```{sage}
# S2 subgroups

assert Z2.is_subgroup(S2)
```

```{sage}
# S3 subgroups

assert Z3.is_subgroup(S3)
```

```{sage}
# S4 subgroups

assert Z4.is_subgroup(S4)
assert K4G.is_subgroup(S4)
```

```{sage}
# S5 subgroups

assert Z5.is_subgroup(S5)
```

```{sage}
# S6 subgroups

assert Z6.is_subgroup(S6)
assert Z2xZ3.is_subgroup(S6)
assert S3.is_subgroup(S6)
```

#### Free groups

A free group $G$ is defined as follows:

- $X=\left\{g_1, g_2, \ldots, g_n\right\}$ a subset of $G$
- $g \in G - \{e\}$ can be uniquely written as $g=g_{j_1}^{i_1} g_{j_2}^{i_2} \cdots g_{j_m}^{i_m}$ with $i_k \in \mathbb{Z} \backslash\{0\}$ and $g_{j_i} \neq g_{j_{i+1}}$

A relation $r$ is a constraint $r \equiv g_{j_2}^{i_1} g_{j_2}^{i_2} \cdots g_{j_m}^{i_m}=e$.

The presentation of the group $G$ is defined as $\left\langle g_1, g_2, \ldots, g_n \mid r_1, r_2, \ldots, r_m\right\rangle$.

```{sage}
# G = <a>

G.<a> = FreeGroup(1)
G
```

```{sage}
# G = <a, b>

G.<a, b> = FreeGroup(2)
G
```

```{sage}
# G = <a|a^n>

n = 3
F.<a> = FreeGroup(1)
G = F / [a^n]
G
```

```{sage}
# G, Z3 isomorphism

assert Z3.is_isomorphic(G.as_permutation_group())
```

```{sage}
# G = <a,b| a*b*a^(-1)*b^(-1)>

F.<a, b> = FreeGroup(2)
G = FreeGroup(['a', 'b']) / [a*b*a^(-1)*b^(-1)]
G
```

```{sage}
# G = <r,f| r^4,f^2,rfrf>

F.<r, f> = FreeGroup(2)
G = F / [r^4, f^2, r*f*r*f]
G
```

```{sage}
# G, D4 ismoorphism

assert D4.is_isomorphic(G.as_permutation_group())
```

### Lie groups

A Lie group is a continuous group whose group manifold is differentiable. The
group $\operatorname{GL}(n, \mathbb{C})$ and its subgroups are called matrix Lie
groups.