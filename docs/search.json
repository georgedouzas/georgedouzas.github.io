[
  {
    "objectID": "presentations/reinforcement-learning/index.html#introduction",
    "href": "presentations/reinforcement-learning/index.html#introduction",
    "title": "Reinforcement Learning and LLM-based Agents",
    "section": "Introduction",
    "text": "Introduction\nThis presentation follows (Zhao 2025).\n\nReinforcement Learning\n\nAn agent learns to optimize a specified target through trial and error interactions with the environment\nTraditional RL methods struggle with high-dimensional state spaces and complex environments\nIntegration of deep learning techniques with RL has led to significant breakthroughs\n\n\n\nLarge Language Models\n\nLLMs typically refer to the Transformer-based language models containing hundreds of billions of parameters\nThey tend to exhibit emergent abilities that are not present in small models\n\nIn-context learning\n\nTask-related texts are included in the prompts as context information\n\nInstruction following\n\nDiverse task-specific datasets formatted with natural language descriptions\n\nStep-by-step reasoning\n\nChain of Thought\nTree of Thought\nGraph of Thought\n\n\n\n\n\nLLM-enhanced Reinforcement Learning\n\nMethods that utilize the high-level cognitive capabilities of pre-trained LLM models to assist the RL paradigm\nTaxonomy\n\nInformation processor\n\nFeature representations extraction\nInformation translation to DSL\n\nReward designer\n\nImplicit\nExplicit\n\nDecision-maker\n\nAction making\nAction guiding\n\nGenerator\n\nWorld model simulator\nPolicy interpreter"
  },
  {
    "objectID": "presentations/reinforcement-learning/index.html#introduction-to-markov-decision-process",
    "href": "presentations/reinforcement-learning/index.html#introduction-to-markov-decision-process",
    "title": "Reinforcement Learning and LLM-based Agents",
    "section": "Introduction to Markov Decision Process",
    "text": "Introduction to Markov Decision Process\n\nDescription\nA Markov Decision Process is a mathematical framework used to describe decision-making in situations where outcomes are partly random and partly controlled by an agent.\nAt each time step, the agent:\n\nObserves the current state of the environment\nTakes an action, which may lead to a transition to a new state\nReceives a reward based on the action taken and the resulting state\n\nThe goal of the agent is to maximize the cumulative reward over time by choosing the best possible actions based on the current state.\n\n\nAutonomous driving\n\nState space: \\(\\mathscr{S} = \\left\\{ (\\text{position}, \\text{speed}, \\text{lane}, \\text{proximity to vehicles}, \\text{traffic signals})_1, \\dots \\right\\}\\)\nAction space: \\(\\mathscr{A} = \\{ \\text{accelerate}, \\text{brake}, \\text{left}, \\text{right}, \\text{stay} \\}\\)\nReward space: \\(\\mathscr{R} = \\{ \\text{+1 for safe driving}, \\text{-10 for collision}, \\text{+5 for reaching the goal} \\}\\)\nModel: The dynamics describe the effects of the vehicle’s actions on its next state, such as how acceleration changes speed and position.\n\n\n\nHealthcare treatment planning\n\nState Space: \\(\\mathscr{S} = \\left\\{ \\big(\\text{disease state}, \\text{treatment response}, \\text{vital signs}, \\text{age} \\big)_1, \\dots \\right\\}\\)\nAction Space: \\(\\mathscr{A} = \\{ \\text{drug A}, \\text{drug B}, \\text{surgery}, \\text{no treatment} \\}\\)\nReward Space: \\(\\mathscr{R} = \\{ \\text{+10 for recovery}, \\text{-5 for side effects}, \\text{-10 for relapse} \\}\\)\nModel: The dynamics describe how treatments affect the patient’s health, with probabilistic transitions between health states based on treatment and health conditions."
  },
  {
    "objectID": "presentations/reinforcement-learning/index.html#probability-theory",
    "href": "presentations/reinforcement-learning/index.html#probability-theory",
    "title": "Reinforcement Learning and LLM-based Agents",
    "section": "Probability Theory",
    "text": "Probability Theory\n\nRandom experiment\nA Random experiment is a process that produces an unpredictable outcome.\n\n\n\n\n\n\nExample\n\n\n\nA rolling a fair die.\n\n\n\n\nProbability space\nA probability space \\((S, F, P)\\) is defined as follows:\n\nSample space \\(S\\)\n\nSet of possible outcomes\n\nSigma-algebra \\(F\\)\n\n\\(A \\in F \\Rightarrow A^c \\in F\\)\n\\(\\{A_i\\}_{i=1}^{\\infty} \\subseteq F \\Rightarrow \\bigcup_{i=1}^{\\infty} A_i \\in F\\)\n\nProbability measure \\(P\\)\n\n\\(P: F \\rightarrow \\mathbb{R}\\)\n\nNon-negativity \\(P(A) \\geq 0\\) for all \\(A \\in F\\)\nNormalization \\(P(S) = 1\\)\nCountable additivity \\(P\\left(\\bigcup_{i=1}^{\\infty} A_i\\right) = \\sum_{i=1}^{\\infty} P(A_i)\\), \\(A_i\\) disjoint\n\n\n\n\n\n\n\n\n\nExample\n\n\n\n\nSample space \\(S\\)\n\n\\(S = \\{1, 2, 3, 4, 5, 6\\}\\)\n\nSigma-algebra \\(F\\)\n\n\\(F = \\{\\emptyset, \\{1\\}, \\{2\\}, \\dots, S\\}\\)\n\nProbability measure \\(P\\)\n\n\\(P(\\{i\\}) = \\frac{1}{6}\\) for each \\(i \\in S\\)\n\n\n\n\n\n\nRandom variable\nA random variable \\(X\\) is a function \\(X: S \\to \\mathbb{R}\\) such that \\(\\forall x \\in \\mathbb{R}\\):\n\\[X^{-1}((-\\infty, x]) \\in F\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\\(X(s) = s\\)\n\\(Y(s) = \\begin{cases} 1, & \\text{if } s \\text{ is even} \\\\ 0, & \\text{if } s \\text{ is odd} \\end{cases}\\)\n\\(Z(s) = \\begin{cases} 1, & \\text{if } s \\leq 3 \\\\ 0, & \\text{if } s &gt; 3 \\end{cases}\\)\n\n\n\n\n\nPMF\nThe PMF of a discrete random variable \\(X\\) is a function \\(p_X: \\mathbb{R} \\to [0, 1]\\) such that:\n\\[p_X(x) = P(X = x)\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\\(p_X(x) = \\frac{1}{6}\\) for \\(x = 1, 2, 3, 4, 5, 6\\)\n\\(p_Y(0) = p_Y(1) = \\frac{3}{6} = 0.5\\)\n\\(p_Z(0) = p_Z(1) = \\frac{3}{6} = 0.5\\)\n\n\n\n\n\nJoint PMF\nThe joint PMF of two discrete random variables \\(X\\) and \\(Y\\) is defined as follows:\n\\[p_{X,Y}(x, y) = P(X = x, Y = y)\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\\(p_{X,Y}(x, y) =\\begin{cases} \\frac{1}{6}, & \\text{if } (x, y) \\in \\{(1, 0), (2, 1), (3, 0), (4, 1), (5, 0), (6, 1)\\} \\\\ 0, & \\text{otherwise} \\end{cases}\\)\n\n\n\n\n\nConditional PMF\nThe conditional PMF of two discrete random variables \\(X\\) and \\(Y\\) is defined as follows:\n\\[p_{Y|X}(y | x) = \\frac{P_{X,Y}(x, y)}{P_X(x)}\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\\(p_{Y|X}(y | x=2) = \\begin{cases} 1, & \\text{if } y = 1 \\\\ 0, & \\text{if } y = 0 \\end{cases}\\)\n\n\n\n\n\nIndependence\nTwo random variables \\(X\\) and \\(Y\\) are independent when for all \\(x, y\\) the following condition holds:\n\\[p_{X,Y}(x, y) = P_X(x)P_Y(y)\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\\(p_{X,Y}(x, y) \\neq p_X(x)p_Y(y)\\) and \\(X\\), \\(Y\\) are not independent\n\n\n\n\n\nConditional independence\nTwo random variables \\(X\\) and \\(Y\\) are conditionally independent given the random variable \\(Z\\) when for all \\(x, y, z\\) the following condition holds:\n\\[p_{Y|X, Z}(y | x, z) = P_{Y|Z}(y | z)\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\\(p_{Y|X,Z}(y | x, z) = p_{Y|X}(y | x) = \\begin{cases} 1, & \\text{if } x \\text{ is even and } y = 1 \\\\ 1, & \\text{if } x \\text{ is odd and } y = 0 \\\\ 0, & \\text{otherwise} \\end{cases}\\)\n\n\n\n\n\nJoint PMF law of total probability\nThe joint PMF of two random variables \\(X\\) and \\(Y\\) satisfies the following relation:\n\\[p_X(x) = \\sum_y p_{X, Y}(x, y)\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\\(\\sum_y p_{X, Y}(x, y) = p_{X, Y}(x, 0) + p_{X, Y}(x, 1) = p_X(x)\\)\n\\(\\sum_x p_{X, Y}(x, y) = p_{X, Y}(1, y) + p_{X, Y}(2, y) + \\cdots = p_Y(y)\\)\n\n\n\n\n\nConditional PMF chain rule\nThe chain rule of conditional PMFs is the following:\n\\[p_{X|Y}(x \\mid y)=\\sum_z p_{X|Z,Y}(x \\mid z, y) p_{Z|Y}(z \\mid y)\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\\(p_{X|Z,Y}(x \\mid z, y) =\\begin{cases} \\frac{1}{2}, & \\text{if } x = 4 \\text{ or } 6, z = 1, y = 1 \\\\ 1, & \\text{if } x = 2, z = 0, y = 1 \\\\ 1, & \\text{if } x = 5, z = 1, y = 0 \\\\ \\frac{1}{2}, & \\text{if } x = 1 \\text{ or } 3, z = 0, y = 0 \\\\ 0, & \\text{otherwise} \\end{cases}\\)\n\\(p_{Z|Y}(z \\mid y) = \\begin{cases} \\frac{2}{3}, & \\text{if } z = 1 \\text{ and } y = 1 \\\\ \\frac{1}{3}, & \\text{if } z = 0 \\text{ and } y = 1 \\\\ \\frac{1}{3}, & \\text{if } z = 1 \\text{ and } y = 0 \\\\ \\frac{2}{3}, & \\text{if } z = 0 \\text{ and } y = 0 \\\\0, & \\text{otherwise} \\end{cases}\\)\n\\(p_{X|Y}(x \\mid y) = \\begin{cases} \\frac{1}{3}, & \\text{if } x \\text{ is even and } y = 1 \\\\ \\frac{1}{3}, & \\text{if } x \\text{ is odd and } y = 0 \\\\ 0, & \\text{otherwise} \\end{cases}\\)\n\n\n\n\n\nExpectation\nThe expectation of a discrete random variable \\(X\\) is defined as follows:\n\\[\\mathbb{E}[X]=\\sum_x p_X(x) x\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\\(\\mathbb{E}[X]= (1 + 2 + 3 + 4 + 5 + 6) \\cdot \\frac{1}{6} = 3.5\\)\n\n\n\n\n\nConditional expectation\nThe conditional expectation of two discrete random variables \\(X\\) and \\(Y\\) is defined as follows:\n\\[\\mathbb{E}[X \\mid Y=y]=\\sum_x x p_{X|Y}(x \\mid y)\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\\(\\mathbb{E}[X \\mid Y=1] = \\sum_x x p_{X|Y}(x \\mid y=1) = (2 + 4 + 6) \\cdot \\frac{1}{3} = 4\\)\n\n\n\n\n\nLaw of total expectation\nThe law of total expectation of two discrete random variables \\(X\\) and \\(Y\\) is the following:\n\\[\\mathbb{E}[X]=\\sum_y \\mathbb{E}[X \\mid Y=y] p_Y(y)\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\\(\\mathbb{E}[X]= \\mathbb{E}[X \\mid Y=1] p_Y(1) + \\mathbb{E}[X \\mid Y=0] p_Y(0) = \\frac{4 + 3}{2} = 3.5\\)\n\n\n\n\n\nVariance\nThe variance of a random variable \\(X\\) is defined as follows:\n\\[\\operatorname{var}(X)=\\mathbb{E}\\left[(X-\\bar{X})^2\\right] = \\mathbb{E}[X^2] - (\\mathbb{E}[X])^2\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\\(\\operatorname{var}(X) = \\frac{1^2 + \\cdots + 6^2}{6} - 3.5^2 \\approx 2.92\\)\n\n\n\n\n\nCovariance\nThe covariance of two random variables \\(X\\) and \\(Y\\) is defined as follows:\n\\[\\operatorname{cov}(X, Y)=\\mathbb{E}[(X-\\bar{X})(Y-\\bar{Y})] = \\mathbb{E}[XY] - \\mathbb{E}[X] \\mathbb{E}[Y]\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\\(\\operatorname{cov}(X, Y)=\\sum_{x,y} p_{X, Y}(x, y) xy - \\mathbb{E}[X] \\mathbb{E}[Y] = 0.25\\)\n\n\n\n\n\nCovariance matrix\nThe covariance of a random vector \\(\\vec{X}\\) is defined as follows:\n\\[\\Sigma=\\mathbb{E} \\left[(\\vec{X}- \\bar{\\vec{X}})(\\vec{X}-\\bar{\\vec{X}})^T\\right] \\in \\mathbb{R}^{n \\times n}\\]\nIn components form:\n\\[[\\Sigma]_{i j} = \\operatorname{cov}\\left(X_i, X_j\\right)\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\\(\\Sigma = \\begin{pmatrix} \\text{Var}(X) & \\text{Cov}(X, Y) & \\text{Cov}(X, Z) \\\\ \\text{Cov}(Y, X) & \\text{Var}(Y) & \\text{Cov}(Y, Z) \\\\ \\text{Cov}(Z, X) & \\text{Cov}(Z, Y) & \\text{Var}(Z) \\end{pmatrix} = \\begin{pmatrix} 2.92 & 0.25 & -0.75 \\\\ 0.25 & 0.25 & \\frac{1}{12} \\\\ -0.75 & \\frac{1}{12} & 0.25 \\end{pmatrix}\\)"
  },
  {
    "objectID": "presentations/reinforcement-learning/index.html#basics-of-markov-decision-process",
    "href": "presentations/reinforcement-learning/index.html#basics-of-markov-decision-process",
    "title": "Reinforcement Learning and LLM-based Agents",
    "section": "Basics of Markov Decision Process",
    "text": "Basics of Markov Decision Process\n\n\nDefinition\n\nSets\n\nState space: \\(\\mathscr{S}=\\left\\{s_1, s_2, \\ldots \\right\\}\\)\nAction space: \\(\\mathscr{A}(s)=\\left\\{a_1, a_2, \\ldots, \\right\\}\\)\nReward space: \\(\\mathscr{R}(s, a)=\\left\\{r_1, r_2, \\ldots \\right\\}\\)\n\nModel\n\nState transition: \\(p(s' \\mid s, a)\\)\nReward: \\(p(r \\mid s, a)\\)\n\nPolicy\n\n\\(\\pi(a \\mid s) = p(a \\mid s)\\)\n\nMarkov property\n\n\\(p\\left(s_{t+1} \\mid s_t, a_t, s_{t-1}, \\ldots \\right)=p\\left(s_{t+1} \\mid s_t, a_t\\right)\\)\n\\(p\\left(r_{t+1} \\mid s_t, a_t, s_{t-1}, \\ldots \\right)=p\\left(r_{t+1} \\mid s_t, a_t\\right)\\)\n\n\n\n\n\n\n\n\nExample\n\n\n\n\n\nSets\n\nState space: \\(\\mathscr{S} = \\{ s_1, s_2, s_3, s_4 \\}\\)\nAction space: \\(\\mathscr{A} = \\{ \\uparrow, \\downarrow, \\leftarrow, \\rightarrow, \\bigcirc \\}\\)\nReward space: \\(\\mathscr{R} = \\{ -1, +1, 0 \\}\\)\n\nModel\n\nState transition: \\(p(s' \\mid s, a) = 0 \\text{ or } 1\\)\nReward: \\(p(r \\mid s, a) = 0 \\text{ or } 1\\)\n\nPolicy\n\n\\(\\pi(a \\mid s) = 0 \\text{ or } 1\\)\n\nMarkov property\n\n\\(p\\left(s_{t+1} \\mid s_t, a_t, s_{t-1}, \\ldots \\right)=p\\left(s_{t+1} \\mid s_t, a_t\\right)\\)\n\\(p\\left(r_{t+1} \\mid s_t, a_t, s_{t-1}, \\ldots \\right)=p\\left(r_{t+1} \\mid s_t, a_t\\right)\\)\n\n\n\n\n\n\nState-action-reward trajectory\nThe state-action-reward trajectory is defined as follows:\n\\[\\ldots S_t, R_{t} \\overset{A_t} \\rightarrow S_{t+1}, R_{t+1} \\overset{A_{t+1}} \\rightarrow S_{t+2}, R_{t+2} \\ldots\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\\(\\ldots s_1, 0 \\overset{\\downarrow} \\rightarrow s_3, 0 \\overset{\\rightarrow} \\rightarrow s_4, 1 \\overset{\\bigcirc} \\rightarrow s_4,\n1 \\overset{\\bigcirc} \\rightarrow \\ldots\\)\n\n\n\n\n\nDiscounted return\nThe discounted return is defined as follows:\n\\[G_t = R_{t+1} + \\gamma \\cdot R_{t+2} + \\gamma^2 \\cdot R_{t+3} + \\cdots\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\\(G_t = 0 + \\gamma \\cdot 1 + \\gamma^2 \\cdot 1 + \\cdots = \\frac{\\gamma}{1-\\gamma}\\)\n\n\n\n\n\nTerminal state\n\nExists \\(s_{T}\\) that resets the next state to a starting state\n\nEpisodic task: There are terminal states\nContinuing task: There are no terminal states\n\n\n\n\n\n\n\n\nExample"
  },
  {
    "objectID": "presentations/reinforcement-learning/index.html#state-value-and-bellman-equation",
    "href": "presentations/reinforcement-learning/index.html#state-value-and-bellman-equation",
    "title": "Reinforcement Learning and LLM-based Agents",
    "section": "State Value and Bellman Equation",
    "text": "State Value and Bellman Equation\n\nState value\nThe state value is defined as follows:\n\\[v_\\pi(s) \\doteq \\mathbb{E}\\left[G_t \\mid S_t=s\\right]\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\n\\(v_\\pi(s_1) = -0.5 + \\frac{\\gamma}{1-\\gamma}\\)\n\\(v_\\pi(s_2) = \\frac{1}{1-\\gamma}\\)\n\\(v_\\pi(s_3) = \\frac{1}{1-\\gamma}\\)\n\\(v_\\pi(s_4) = \\frac{1}{1-\\gamma}\\)\n\n\n\n\n\nBellman equation\nThe Bellman equation of the state values is the following:\n\\[v_\\pi(s) = \\sum_{a \\in \\mathscr{A}} \\pi(a \\mid s)\\left[\\sum_{r \\in \\mathscr{R}} p(r \\mid s, a) r+\\gamma \\sum_{s^{\\prime} \\in\n\\mathscr{S}} p\\left(s^{\\prime} \\mid s, a\\right) v_\\pi\\left(s^{\\prime}\\right)\\right]\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\n\\(v_\\pi(s_1) = -0.5 + 0.5 \\gamma (v_\\pi(s_2) + v_\\pi(s_3))\\)\n\\(v_\\pi(s_2) = 1 + \\gamma v_\\pi(s_4)\\)\n\\(v_\\pi(s_3) = 1 + \\gamma v_\\pi(s_4)\\)\n\\(v_\\pi(s_4) = 1 + \\gamma v_\\pi(s_4)\\)\n\n\n\n\n\nBellman equation equivalent forms\nThe Bellman equation can be written as follows:\n\\[v_\\pi(s)=\\sum_{a \\in \\mathscr{A}} \\pi(a \\mid s) \\sum_{s^{\\prime} \\in \\mathscr{S}} \\sum_{r \\in \\mathscr{R}}\np\\left(s^{\\prime}, r \\mid s, a\\right)\\left[r+\\gamma v_\\pi\\left(s^{\\prime}\\right)\\right]\\]\nIf the reward depends only on the next state the Bellman equation can be written as follows:\n\\[v_\\pi(s)=\\sum_{a \\in \\mathscr{A}} \\pi(a \\mid s) \\sum_{s^{\\prime} \\in \\mathscr{S}} p\\left(s^{\\prime} \\mid s,\na\\right)\\left[r\\left(s^{\\prime}\\right)+\\gamma v_\\pi\\left(s^{\\prime}\\right)\\right]\\]\n\n\nBellman equation matrix-vector form\nThe Bellman equation in matrix vector form is written as follows:\n\\[v_\\pi=r_\\pi+\\gamma P_\\pi v_\\pi\\]\nwhere\n\\[\\left[r_\\pi\\right]_s \\doteq \\sum_{a \\in \\mathscr{A}} \\pi(a \\mid s) \\sum_{r \\in \\mathscr{R}} p(r \\mid s, a) r\\]\n\\[\\left[P_\\pi\\right]_{s s^{\\prime}} \\doteq \\sum_{a \\in \\mathscr{A}} \\pi(a \\mid s) p\\left(s^{\\prime} \\mid s, a\\right)\\]\nThe state transition matrix \\(P\\) has the following properties:\n\\[P_\\pi \\geq 0\\]\n\\[P_\\pi \\mathbf{1}=\\mathbf{1}\\]\n\\[\\exists (I-\\gamma P_\\pi)^{-1}\\]\n\\[\\left(I-\\gamma P_\\pi\\right)^{-1} \\geq I\\]\n\\[\\left(I-\\gamma P_\\pi\\right)^{-1} r \\geq , r \\geq 0\\]\n\\[\\left(I-\\gamma P_\\pi\\right)^{-1} r_1 \\geq\\left(I-\\gamma P_\\pi\\right)^{-1} r_2, r_1 \\geq r_2\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\n\\(r_\\pi = \\left[\\begin{array}{c}0.5(0)+0.5(-1) \\\\ 1 \\\\ 1 \\\\ 1\\end{array}\\right]\\)\n\\(P_\\pi = \\left[\\begin{array}{cccc}0 & 0.5 & 0.5 & 0 \\\\ 0 & 0 & 0 & 1 \\\\ 0 & 0 & 0 & 1 \\\\ 0 & 0 & 0 & 1\\end{array}\\right]\\)\n\n\n\n\n\nPolicies and state values\n\n\n\n\n\n\nExample\n\n\n\nThe following “good” policies are different but they have the same state values:\n\n\n\n\n\n\n\n\n\nExample\n\n\n\nThe following “bad” policies have lower state values:\n\n\n\n\n\nBellman equation closed-form solution\n\\[v_\\pi=\\left(I-\\gamma P_\\pi\\right)^{-1} r_\\pi\\]\n\n\nBellman equation iterative solution\n\\[v_{k+1}=r_\\pi+\\gamma P_\\pi v_k, \\quad k=0,1,2, \\ldots\\]\n\n\nState transition probability\n\\[[P]_{(s, a), s^{\\prime}}=p\\left(s^{\\prime} \\mid s, a\\right)\\]\n\nimport numpy as np\nP = np.array(\n    [\n        [1., 0., 0., 0.],\n        [0., 0., 1., 0.],\n        [1., 0., 0., 0.],\n        [0., 1., 0., 0.],\n        [1., 0., 0., 0.],\n        [0., 1., 0., 0.],\n        [0., 0., 0., 1.],\n        [1., 0., 0., 0.],\n        [0., 1., 0., 0.],\n        [0., 1., 0., 0.],\n        [1., 0., 0., 0.],\n        [0., 0., 1., 0.],\n        [0., 0., 1., 0.],\n        [0., 0., 0., 1.],\n        [0., 0., 1., 0.],\n        [0., 1., 0., 0.],\n        [0., 0., 0., 1.],\n        [0., 0., 1., 0.],\n        [0., 0., 0., 1.],\n        [0., 0., 0., 1.]\n    ]\n)\n\n\n\nReward probability\n\\[[R]_{(s, a), r}=p\\left(r \\mid s, a\\right)\\]\n\nR = np.array(\n    [\n        [1., 0., 0.],\n        [0., 0., 1.],\n        [1., 0., 0.],\n        [1., 0., 0.],\n        [0., 0., 1.],\n        [1., 0., 0.],\n        [0., 1., 0.],\n        [0., 0., 1.],\n        [1., 0., 0.],\n        [1., 0., 0.],\n        [0., 0., 1.],\n        [1., 0., 0.],\n        [1., 0., 0.],\n        [0., 1., 0.],\n        [0., 0., 1.],\n        [1., 0., 0.],\n        [1., 0., 0.],\n        [0., 0., 1.],\n        [1., 0., 0.],\n        [0., 1., 0.]\n    ]\n)\n\n\n\nPolicy probability\n\\[[\\Pi]_{a, s} = p(a \\mid s)\\]\n\nPi = np.array([\n    [0.0, 0.0, 0.0, 0.0],\n    [0.5, 1.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0],\n    [0.5, 0.0, 1.0, 0.0],\n    [0.0, 0.0, 0.0, 1.0]\n])\n\n\n\nExpected reward under policy\n\\[\\left[r_\\pi\\right]_s = \\sum_{a \\in \\mathscr{A}} \\pi(a \\mid s) \\sum_{r \\in \\mathscr{R}} p(r \\mid s, a) r\\]\n\\[\\left[r_\\pi\\right]_s = \\sum_{a \\in \\mathscr{A}} \\big( R \\cdot \\left[\\begin{array}{c}-1 & 1 & 0 \\end{array}\\right]^T \\big)_{s, a} \\cdot [\\Pi]_{a, s}\\]\n\nr_space = np.array([-1, 1, 0])\nr_p = np.diagonal(\n    np.matmul(\n        np.dot(R, r_space).reshape(4, 5), \n        Pi\n    )\n)\nr_p\n\narray([-0.5,  1. ,  1. ,  1. ])\n\n\n\n\nState transition probability under policy\n\\[\\left[P_\\pi\\right]_{s s^{\\prime}} = \\sum_{a \\in \\mathscr{A}} \\pi(a \\mid s) p\\left(s^{\\prime} \\mid s, a\\right)\\]\n\\[\\left[P_\\pi\\right]_{s s^{\\prime}} = \\sum_{a \\in \\mathscr{A}} [\\Pi^T]_{s, a} [P]_{(s, a), s^{\\prime}}\\]\n\nP_p = np.diagonal(\n    np.matmul(\n        P.T.reshape(4,4,5), \n        Pi\n    ).T\n).T\nP_p\n\narray([[0. , 0.5, 0.5, 0. ],\n       [0. , 0. , 0. , 1. ],\n       [0. , 0. , 0. , 1. ],\n       [0. , 0. , 0. , 1. ]])\n\n\n\n\nImplementing Bellman equation closed-form solution\n\\[v_\\pi=\\left(I-\\gamma P_\\pi\\right)^{-1} r_\\pi\\]\n\ngamma = 0.9\nI = np.identity(r_p.size)\nv_cfs = np.dot(np.linalg.inv(I - gamma * P_p), r_p)\nv_cfs\n\narray([ 8.5, 10. , 10. , 10. ])\n\n\n\n\nImplementing Bellman equation iterative solution\n\\[v_{k+1}=r_\\pi+\\gamma P_\\pi v_k, \\quad k=0,1,2, \\ldots\\]\n\ntol = 1e-5\nv_is = np.zeros_like(r_p)\nwhile True:\n    v_is_current = v_is\n    v_is = r_p + gamma * np.dot(P_p, v_is)\n    diff = np.abs(v_is - v_is_current)\n    if np.any(diff &lt; tol):\n        break\nv_is\n\narray([8.49991665, 9.99991665, 9.99991665, 9.99991665])"
  },
  {
    "objectID": "presentations/reinforcement-learning/index.html#action-value-and-bellman-equation",
    "href": "presentations/reinforcement-learning/index.html#action-value-and-bellman-equation",
    "title": "Reinforcement Learning and LLM-based Agents",
    "section": "Action Value and Bellman Equation",
    "text": "Action Value and Bellman Equation\n\nAction value\nThe action value is defined as follows:\n\\[q_\\pi(s, a) \\doteq \\mathbb{E}\\left[G_t \\mid S_t=s, A_t=a\\right]\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\n\\(q_\\pi(s_1, \\rightarrow) = -1 + \\gamma \\frac{1}{1-\\gamma}\\)\n\\(q_\\pi(s_1, \\downarrow) = \\gamma \\frac{1}{1-\\gamma}\\)\n\\(q_\\pi(s_1, \\leftarrow) = -1 + \\gamma (-0.5 + \\frac{\\gamma}{1-\\gamma})\\)\n\\(q_\\pi(s_1, \\uparrow) = -1 + \\gamma (-0.5 + \\frac{\\gamma}{1-\\gamma})\\)\n\\(q_\\pi(s_1, \\bigcirc) = \\gamma (-0.5 + \\frac{\\gamma}{1-\\gamma})\\)\n\\(q_\\pi(s_2, \\rightarrow) = -1 + \\gamma \\frac{1}{1-\\gamma}\\)\n\\(q_\\pi(s_2, \\downarrow) = 1 + -1 + \\gamma \\frac{1}{1-\\gamma}\\)\n\\(q_\\pi(s_2, \\leftarrow) = \\gamma (-0.5 + \\frac{\\gamma}{1-\\gamma})\\)\n\\(q_\\pi(s_2, \\uparrow) = -1 + \\gamma \\frac{1}{1-\\gamma}\\)\n\\(q_\\pi(s_2, \\bigcirc) = -1 + \\gamma \\frac{1}{1-\\gamma}\\)\n\\(q_\\pi(s_3, \\rightarrow) = 1 + \\gamma \\frac{1}{1-\\gamma}\\)\n\\(q_\\pi(s_3, \\downarrow) = -1 + \\gamma \\frac{1}{1-\\gamma}\\)\n\\(q_\\pi(s_3, \\leftarrow) = -1 + \\gamma \\frac{1}{1-\\gamma}\\)\n\\(q_\\pi(s_3, \\uparrow) = 1 + \\gamma (-0.5 + \\frac{\\gamma}{1-\\gamma})\\)\n\\(q_\\pi(s_3, \\bigcirc) = \\gamma \\frac{1}{1-\\gamma}\\)\n\\(q_\\pi(s_4, \\rightarrow) = -1 + \\gamma \\frac{1}{1-\\gamma}\\)\n\\(q_\\pi(s_4, \\downarrow) = -1 + \\gamma \\frac{1}{1-\\gamma}\\)\n\\(q_\\pi(s_4, \\leftarrow) = \\gamma \\frac{1}{1-\\gamma}\\)\n\\(q_\\pi(s_4, \\uparrow) = -1 + \\gamma \\frac{1}{1-\\gamma}\\)\n\\(q_\\pi(s_4, \\bigcirc) = 1 + \\gamma \\frac{1}{1-\\gamma}\\)\n\n\n\n\n\nAction value to state value\nThe following formula provides the conversion from action to state value:\n\\[v_\\pi(s)=\\sum_{a \\in \\mathscr{A}} \\pi(a \\mid s) q_\\pi(s, a)\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\n\\(v_\\pi(s_1) = 0.5  + 0.5 \\gamma \\frac{1}{1-\\gamma} = -0.5 + \\frac{\\gamma}{1-\\gamma}\\)\n\n\n\n\n\nState value to action value\nThe following formula provides the conversion from state to action value:\n\n\\(q_\\pi(s, a)=\\sum_{r \\in \\mathscr{R}} p(r \\mid s, a) r+\\gamma \\sum_{s^{\\prime} \\in \\mathscr{S}} p\\left(s^{\\prime} \\mid s,\na\\right) v_\\pi\\left(s^{\\prime}\\right)\\)\n\n\n\n\n\n\n\nExample\n\n\n\n\n\n\\(q_\\pi(s_1, \\rightarrow) = 1(-1) + \\gamma v_\\pi(s_2) = -1 + \\gamma \\frac{1}{1-\\gamma}\\)\n\n\n\n\n\nBellman equations\nThe Bellman equation of the action values is the following:\n\\[q_\\pi(s, a)=\\sum_{r \\in \\mathscr{R}} p(r \\mid s, a) r+\\gamma \\sum_{s^{\\prime} \\in \\mathscr{S}} p\\left(s^{\\prime} \\mid s,\na\\right) \\sum_{a^{\\prime} \\in \\mathscr{A}\\left(s^{\\prime}\\right)} \\pi\\left(a^{\\prime} \\mid s^{\\prime}\\right)\nq_\\pi\\left(s^{\\prime}, a^{\\prime}\\right)\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\n\\(q_\\pi(s_1, \\rightarrow) = -1 + \\gamma q_\\pi(s_2, \\downarrow)\\)\n\\(q_\\pi(s_1, \\downarrow) = \\gamma q_\\pi(s_3, \\rightarrow)\\)\n\\(q_\\pi(s_1, \\leftarrow) = -1 + \\gamma (q_\\pi(s_1, \\rightarrow) + q_\\pi(s_1, \\downarrow))\\)\n\\(q_\\pi(s_1, \\uparrow) = -1 + \\gamma (q_\\pi(s_1, \\rightarrow) + q_\\pi(s_1, \\downarrow))\\)\n\\(q_\\pi(s_1, \\bigcirc) = \\gamma (q_\\pi(s_1, \\rightarrow) + q_\\pi(s_1, \\downarrow))\\)\n\\(q_\\pi(s_2, \\rightarrow) = -1 + \\gamma q_\\pi(s_2, \\downarrow)\\)\n\\(q_\\pi(s_2, \\downarrow) = 1 + + \\gamma q_\\pi(s_4, \\bigcirc)\\)\n\\(q_\\pi(s_2, \\leftarrow) = \\gamma (q_\\pi(s_1, \\rightarrow) + q_\\pi(s_4, \\downarrow))\\)\n\\(q_\\pi(s_2, \\uparrow) = -1 + \\gamma q_\\pi(s_2, \\downarrow)\\)\n\\(q_\\pi(s_2, \\bigcirc) = -1 + \\gamma q_\\pi(s_2, \\downarrow)\\)\n\\(q_\\pi(s_3, \\rightarrow) = 1 + \\gamma q_\\pi(s_4, \\bigcirc)\\)\n\\(q_\\pi(s_3, \\downarrow) = -1 + \\gamma q_\\pi(s_3, \\rightarrow)\\)\n\\(q_\\pi(s_3, \\leftarrow) = -1 + \\gamma q_\\pi(s_3, \\rightarrow)\\)\n\\(q_\\pi(s_3, \\uparrow) = 1 + \\gamma (q_\\pi(s_1, \\rightarrow) + q_\\pi(s_1, \\downarrow))\\)\n\\(q_\\pi(s_3, \\bigcirc) = \\gamma q_\\pi(s_3, \\rightarrow)\\)\n\\(q_\\pi(s_4, \\rightarrow) = -1 + \\gamma q_\\pi(s_4, \\bigcirc)\\)\n\\(q_\\pi(s_4, \\downarrow) = -1 + \\gamma q_\\pi(s_4, \\bigcirc)\\)\n\\(q_\\pi(s_4, \\leftarrow) = \\gamma q_\\pi(s_3, \\rightarrow)\\)\n\\(q_\\pi(s_4, \\uparrow) = -1 + \\gamma q_\\pi(s_2, \\downarrow)\\)\n\\(q_\\pi(s_4, \\bigcirc) = 1 + \\gamma q_\\pi(s_4, \\bigcirc)\\)\n\n\n\n\n\nBellman equation matrix-vector form\nThe Bellman equation in matrix vector form is written as follows:\n\\[q_\\pi=\\tilde{r}+\\gamma P \\Pi q_\\pi\\]\nwhere\n\\[\\left[q_\\pi\\right]_{(s, a)}=q_\\pi(s, a)\\]\n\\[[\\tilde{r}]_{(s, a)}=\\sum_{r \\in \\mathscr{R}} p(r \\mid s, a) r\\]\n\\[[P]_{(s, a), s^{\\prime}}=p\\left(s^{\\prime} \\mid s, a\\right)\\]\n\\[\\Pi_{s^{\\prime},\\left(s^{\\prime}, a^{\\prime}\\right)}=\\pi\\left(a^{\\prime} \\mid s^{\\prime}\\right)\\]\n\n\n\n\n\n\nExample\n\n\n\n\n\n\\(\\tilde{r} = \\left[\\begin{array}{c} -1 \\\\ 0 \\\\ -1 \\\\ -1 \\\\ 0 \\\\ \\vdots\\end{array}\\right]\\)\n\\(P = \\left[\\begin{array}{cccc}1 & 0 & 0 & 0 \\\\ 0 & 0 & 1 & 0 \\\\ 1 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & 0 \\\\ 1 & 0 & 0 & 0 \\\\ \\vdots & \\vdots & \\vdots & \\vdots \\end{array}\\right]\\)\n\\(\\Pi = \\left[\\begin{array}{cccc}0 & 0.5 & 0 & 0.5 & 0 & 0 & 0 & 0 & 0 & 0 &\\dots \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 &\\dots \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & \\dots \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & \\dots \\end{array}\\right]\\)"
  },
  {
    "objectID": "presentations/symbolic_computation_in_physics_with_python_3/index.html#standard-model",
    "href": "presentations/symbolic_computation_in_physics_with_python_3/index.html#standard-model",
    "title": "Symbolic Computation in Theoretical Physics with Python",
    "section": "Standard model",
    "text": "Standard model\nThe Standard Model model-file:\n\nfrom pathlib import Path\nwith Path.open(Path('models') / 'SM.model', 'rt') as model_file:\n    print(model_file.read())\n\n# YAML 1.1\n---\nAuthor: Lohan Sartore\nDate: 08.06.2020\nName: SM\nGroups: {U1Y: U1, SU2L: SU2, SU3c: SU3}\n\n\nFermions: {\n    Q : {Gen: 3, Qnb: {U1Y: 1/6, SU2L: 2, SU3c: 3}},\n    L : {Gen: 3, Qnb: {U1Y: -1/2, SU2L: 2}},\n    uR : {Gen: 3, Qnb: {U1Y: 2/3, SU3c: 3}},\n    dR : {Gen: 3, Qnb: {U1Y: -1/3, SU3c: 3}},\n    eR : {Gen: 3, Qnb: {U1Y: -1}},\n}\n\nRealScalars: {\n}\n\nComplexScalars: {\n    H : {RealFields: [Pi, Sigma], Norm: 1/sqrt(2), Qnb: {U1Y: 1/2, SU2L: 2}},\n}\n\n\nPotential: {\n\n    Definitions: {\n        Htilde[i] : Eps[i,j]*Hbar[j]\n    },\n\n    Yukawas: {\n        Yu : Qbar[i,a] Htilde[i] uR[a],\n        Yd : Qbar[i,a] H[i] dR[a],\n        Ye : Lbar[i] H[i] eR\n    },\n\n    QuarticTerms: {\n        lambda : (Hbar[i] H[i])**2\n    },\n\n    ScalarMasses: {\n        mu : -Hbar[i] H[i]\n    }\n\n}\n\nVevs: {\n    v: Pi[2]\n}\n\nSubstitutions: {\n    # Rename the gauge coupling constants\n    g_U1Y : g1,\n    g_SU2L : g2,\n    g_SU3c : g3,\n\n    # Possibly define GUT normalizations\n    g1 : sqrt(5/3) * g1,\n\n    # Substitutions for Yukawa matrices\n    Yu : [0, 0, 'yt'],\n    Yd : [0, 0, 'yb'],\n    Ye : [0, 0, 'ytau']\n}\n\nLatex: {\n    # Particles\n\n    uR : u_R,\n    dR : d_R,\n    eR : e_R,\n\n    Pi : \\Pi,\n    Sigma : \\Sigma,\n\n    Htilde : \\tilde{H},\n\n    # Couplings\n\n    g1 : g_1,\n    g2 : g_2,\n    g3 : g_3,\n\n    Yu : Y_u,\n    Yd : Y_d,\n    Ye : Y_e,\n\n    lambda : \\lambda,\n    mu : \\mu,\n\n    yt : y_t,\n    yb : y_b,\n    ytau: y_\\tau\n}\n\n\n\n\nRun PyRate to compute the 2-loop RGEs of the Standard Model:\n\n%run pyR@TE.py --no-MathematicaOutput -m models/SM.model -l 2\n\nSolve the RGEs and plot the results:\n\nimport sys\nsys.path.append('results/SM/PythonOutput')\n\nfrom numpy import sqrt, pi\nfrom SM import RGEsolver\n\n# Create solver object\nrge = RGEsolver('rge', tmin=1.9, tmax=20, initialScale=1.9)\n\n# Running scheme\nrge.loops = {'GaugeCouplings': 2,\n             'Yukawas': 2,\n             'QuarticTerms': 2,\n             'ScalarMasses': 2,\n             'Vevs': 2}\n\n# Gauge Couplings\nrge.g1.initialValue = sqrt(4*pi/128 / (1-.22)) * sqrt(5/3)\nrge.g2.initialValue = sqrt(4*pi/128 / .22)\nrge.g3.initialValue = sqrt(4*pi*.12)\n\n# Yukawa Couplings\nrge.yt.initialValue = .9\nrge.yb.initialValue = .03\nrge.ytau.initialValue = .01\n\n# Quartic Couplings\nrge.lambda_.initialValue = 0.13/2\n\n# Scalar Mass Couplings\nrge.mu.initialValue = sqrt(.13) * 246\n\n# Vacuum-expectation values\nrge.v.initialValue = 246\n\n# Choose Landau gauge\nrge.fixGauge(0)\n\n# Solve the system of RGEs \nrge.solve(step = .05)\n\n# Plot the results\nrge.plot(figSize=(1100, 1000), subPlots=True, printLoopLevel=True)\n\nSystem of RGEs solved in 0.011 seconds.\n\n\n\n\n\n\n\n\n\nShow the generated PDF containing the model details:\n\nfrom IPython.display import IFrame\nIFrame(\"_pyrate/results/SM/SM.pdf\", width=800, height=800)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Georgios Douzas",
    "section": "",
    "text": "My articles on open-source, machine learning, mathematics, and more.\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to affine spaces\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBuild, deploy and observe data workflows\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImplementation of novel oversampling algorithms\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#posts",
    "href": "index.html#posts",
    "title": "Georgios Douzas",
    "section": "",
    "text": "My articles on open-source, machine learning, mathematics, and more.\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to affine spaces\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBuild, deploy and observe data workflows\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImplementation of novel oversampling algorithms\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#publications",
    "href": "index.html#publications",
    "title": "Georgios Douzas",
    "section": "Publications",
    "text": "Publications\nPublished work.\n\n\n\n\n\n\n\n\n\n\nCoset space dimensional reduction and Wilson flux breaking of ten-dimensional N=1, E 8 gauge theory\n\n\nWe consider a N=1 supersymmetric E 8 gauge theory, defined in ten dimensions and we determine all four-dimensional gauge theories resulting from the generalized dimensional…\n\n\n\n\n\n\n\n\n\n\n\n\n\nCoset space dimensional reduction and classification of semi-realistic particle physics models\n\n\nStarting from a Yang-Mills-Dirac theory defined in ten dimensions we classify the semi-realistic particle physics models resulting from their Forgacs-Manton dimensional…\n\n\n\n\n\n\n\n\n\n\n\n\n\nEffective data generation for imbalanced learning using conditional generative adversarial networks\n\n\nLearning from imbalanced datasets is a frequent but challenging task for standard classification algorithms. Although there are different strategies to address this problem…\n\n\n\n\n\n\n\n\n\n\n\n\n\nG-SOMO: An oversampling approach based on self-organized maps and geometric SMOTE\n\n\nTraditional supervised machine learning classifiers are challenged to learn highly skewed data distributions as they are designed to expect classes to equally contribute to…\n\n\n\n\n\n\n\n\n\n\n\n\n\nGeometric SMOTE a geometrically enhanced drop-in replacement for SMOTE\n\n\nClassification of imbalanced datasets is a challenging task for standard algorithms. Although many methods exist to address this problem in different ways, generating…\n\n\n\n\n\n\n\n\n\n\n\n\n\nGeometric SMOTE for regression\n\n\nLearning from imbalanced data sets is known to be a challenging task. There are many proposals to tackle the challenge for classification problems, but regarding regression…\n\n\n\n\n\n\n\n\n\n\n\n\n\nGeometric SMOTE: Effective oversampling for imbalanced learning through a geometric extension of SMOTE\n\n\nClassification of imbalanced datasets is a challenging task for standard algorithms. Although many methods exist to address this problem in different ways, generating…\n\n\n\n\n\n\n\n\n\n\n\n\n\nImbalanced Learning in Land Cover Classification: Improving Minority Classes’ Prediction Accuracy Using the Geometric SMOTE Algorithm\n\n\nThe automatic production of land use/land cover maps continues to be a challenging problem, with important impacts on the ability to promote sustainability and good resource…\n\n\n\n\n\n\n\n\n\n\n\n\n\nImproving Imbalanced Land Cover Classification with K-Means SMOTE: Detecting and Oversampling Distinctive Minority Spectral Signatures\n\n\nLand cover maps are a critical tool to support informed policy development, planning, and resource management decisions. With significant upsides, the automatic production…\n\n\n\n\n\n\n\n\n\n\n\n\n\nImproving imbalanced learning through a heuristic oversampling method based on k-means and SMOTE\n\n\nLearning from class-imbalanced data continues to be a common and challenging problem in supervised learning as standard classification algorithms are designed to handle…\n\n\n\n\n\n\n\n\n\n\n\n\n\nImproving the quality of predictive models in small data GSDOT: A new algorithm for generating synthetic data\n\n\nIn the age of the data deluge there are still many domains and applications restricted to the use of small datasets. The ability to harness these small datasets to solve…\n\n\n\n\n\n\n\n\n\n\n\n\n\nIncreasing the Effectiveness of Active Learning: Introducing Artificial Data Generation in Active Learning for Land Use/Land Cover Classification\n\n\nIn remote sensing, Active Learning (AL) has become an important technique to collect informative ground truth data “on-demand” for supervised classification tasks. Despite…\n\n\n\n\n\n\n\n\n\n\n\n\n\nOversampling for Imbalanced Learning Based on K-Means and SMOTE\n\n\nLearning from class-imbalanced data continues to be a common and challenging problem in supervised learning as standard classification algorithms are designed to handle…\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelf-Organizing Map Oversampling (SOMO) for imbalanced data set learning\n\n\nLearning from imbalanced datasets is challenging for standard algorithms, as they are designed to work with balanced class distributions. Although there are different…\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#presentations",
    "href": "index.html#presentations",
    "title": "Georgios Douzas",
    "section": "Presentations",
    "text": "Presentations\nSlides and materials I have created.\n\n\n\n\n\n\n\n\n\n\nReinforcement Learning and LLM-based Agents\n\n\nLeveraging Reinforcement Learning and LLMs for building smart, adaptive agents\n\n\n\n\n\n\n\n\n\n\n\n\n\nSymbolic Computation in Theoretical Physics with Python\n\n\nPart 2: SageMath\n\n\n\n\n\n\n\n\n\n\n\n\n\nSymbolic Computation in Theoretical Physics with Python\n\n\nPart 3: PyRate\n\n\n\n\n\n\n\n\n\n\n\n\n\nSymbolic Computation in Theoretical Physics with Python\n\n\nPart 1: Open-source libraries\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/physical_space_1/index.html",
    "href": "posts/physical_space_1/index.html",
    "title": "Physical space",
    "section": "",
    "text": "Introduction\nIt’s quite common to think of physical space as \\(\\mathbb{R}^3\\), but this perspective can be misleading, both from a mathematical and a physical standpoint. Instead, the three-dimensional space we encounter in Classical Physics (and even the four-dimensional spacetime in Special Relativity) is more accurately captured by the concept of affine spaces.\n\n\nDefinition\nTo understand this better, let’s dive into what a real affine space is. A real affine space of finite dimension \\(n\\), denoted by \\(\\mathbb{A}^n\\), is a collection of elements known as points, but with some additional structure:\n\nThere’s an associated \\(n\\)-dimensional vector space \\(V\\), which we call the space of displacements or the space of free vectors.\nA mapping \\(\\mathbb{A}^n \\times \\mathbb{A}^n \\ni (P, Q) \\mapsto P - Q \\in V\\) that respects certain conditions:\n\nFor every point \\(Q\\in \\mathbb{A}^n\\) and every vector \\(\\mathbf{v} \\in V\\), there’s a unique point \\(P \\in \\mathbb{A}^n\\) such that \\(P - Q =\\mathbf{v}\\).\nFor any three points \\(P, Q, R \\in \\mathbb{A}^n\\), the equation \\(P - Q + Q - R = P - R\\) always holds.\n\n\n\n\nExample\nA trivial example is the real affine space \\(\\mathbb{A}^n = \\mathbb{R}^n\\) with the displacement space being the vector space \\(\\mathbb{R}^n\\). A more interesting example is the system \\(\\begin{cases}x + y + z = 2 \\\\2x + y - z =\n1\\end{cases}\\)\n\na = matrix([[1,1,1], [2,1,-1]])\nb = vector([2, 1])\n\nThe solution space of the system is an affine space \\(\\mathbb{A}^3\\):\n\nA = AffineSpace(3, RR)\nA\n\n\\(\\displaystyle \\newcommand{\\Bold}[1]{\\mathbf{#1}}\\mathbf{A}_{\\Bold{R}}^{3}\\)\n\n\nAdditionally, the the solution space of the homogeneous system is the space of displacements \\(V\\):\n\nV = VectorSpace(RR, 3).subspace(a.right_kernel().basis())\nV\n\n\\(\\displaystyle \\newcommand{\\Bold}[1]{\\mathbf{#1}}\\mathrm{RowSpan}_{\\Bold{R}}\\left(\\begin{array}{rrr}\n1.00000000000000 & -1.50000000000000 & 0.500000000000000\n\\end{array}\\right)\\)\n\n\nWe can get a particular solution \\(Q \\in \\mathbb{A}^3\\) and verify that it is indeed a solution:\n\nQ = A.point(tuple(a.solve_right(b)))\nassert a * vector(Q) == b\nQ\n\n\\(\\displaystyle \\left(-1.00000000000000, 3.00000000000000, 0.000000000000000\\right)\\)\n\n\nThe general solution of the system is given by the displacement of \\(Q\\). For example another solution \\(P \\in \\mathbb{A}^3\\) is the following:\n\nv, *_ = V.basis()\nP = A.translation(-v)(Q)\nassert a * vector(P) == b\nP\n\n\\(\\displaystyle \\left(0.000000000000000, 1.50000000000000, 0.500000000000000\\right)\\)"
  },
  {
    "objectID": "posts/imbalanced-learn-extra/index.html",
    "href": "posts/imbalanced-learn-extra/index.html",
    "title": "imbalanced-learn-extra",
    "section": "",
    "text": "Introduction\nThe library imbalanced-learn-extra is a Python package that extends imbalanced-learn. It implements algorithms that are not included in imbalanced-learn due to their novelty or lower citation number. The current version includes the following:\n\nA general interface for clustering-based oversampling algorithms.\nThe Geometric SMOTE algorithm.\n\n\n\nClustering-based oversampling\nClustering-based oversampling algorithms deal with the within-classes imbalance issue, since SMOTE and its variants addresses only the between-classes imbalance. To present the API, let’s first load some data:\n\n# Imports\nfrom sklearn.datasets import load_breast_cancer\n\n# Load data\nX, y = load_breast_cancer(return_X_y=True)\n\nThe data are imbalanced:\n\n# Imports\nfrom collections import Counter\n\n# Classes distribution\ncounter = Counter(y)\nprint(\n    f\"Number of majority class samples: {counter[1]}.\",\n    f\"Number of minority class samples: {counter[0]}.\",\n    sep=\"\\n\",\n)\n\nNumber of majority class samples: 357.\nNumber of minority class samples: 212.\n\n\nI will use KMeans and SMOTE to create a clustering-based oversampler, but any other combination would work:\n\n# Imports\nfrom sklearn.datasets import load_breast_cancer\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.cluster import KMeans\nfrom imblearn_extra.clover.over_sampling import ClusterOverSampler\n\n# Create KMeans-SMOTE instance\nrnd_seed = 14\nsmote = SMOTE(random_state=rnd_seed + 1)\nkmeans = KMeans(n_clusters=10, random_state=rnd_seed + 3, n_init=50)\nkmeans_smote = ClusterOverSampler(oversampler=smote, clusterer=kmeans)\n\nNow we can use the fit_resample method to get the resampled data:\n\n_, y_res = kmeans_smote.fit_resample(X, y)\ncounter = Counter(y_res)\nprint(\n    f\"Number of majority class samples: {counter[1]}.\",\n    f\"Number of minority class samples: {counter[0]}.\",\n    sep=\"\\n\",\n)\n\nNumber of majority class samples: 357.\nNumber of minority class samples: 357.\n\n\nThe clustering-based oversamplers can be used in machine learning pipelines:\n\n# Imports\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom imblearn.pipeline import make_pipeline\n\n# Cross validation score\nclassifier = RandomForestClassifier(random_state=rnd_seed)\nclassifier = make_pipeline(kmeans_smote, classifier)\nscore = cross_val_score(estimator=classifier, X=X, y=y, scoring=\"f1\").mean()\nprint(f\"The cross-validation F-score is {score}.\")\n\nThe cross-validation F-score is 0.9664262119887302.\n\n\n\n\nGeometric SMOTE\nGeometric SMOTE is not just another member of the SMOTE’s family since it expands the data generation area and does not just use linear interpolation of existing samples to generate for new samples. To test its performance, let’s first simulate various imbalanced datasets:\n\n# Imports\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import ParameterGrid\n\n# Set random seed\nrnd_seed = 43\n\n# Generate imbalanced datasets\ndatasets = []\ndatasets_params = ParameterGrid(\n    {\"weights\": [[0.8, 0.2], [0.9, 0.1]], \"class_sep\": [0.01, 0.1]}\n)\nfor data_params in datasets_params:\n    datasets.append(\n        make_classification(\n            random_state=rnd_seed,\n            n_informative=10,\n            n_samples=2000,\n            n_classes=2,\n            **data_params,\n        )\n    )\n\nWe will also create pipelines of various oversamplers, classifiers and their hyperparameters:\n\n# Imports\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier, NearestNeighbors\nfrom sklearn.model_selection import cross_val_score, StratifiedKFold, GridSearchCV\nfrom imblearn.pipeline import make_pipeline\nfrom imblearn.over_sampling import RandomOverSampler, SMOTE\nfrom imblearn_extra.gsmote import GeometricSMOTE\n\n# Pipelines\nclassifiers = [LogisticRegression(), KNeighborsClassifier()]\noversamplers = [None, RandomOverSampler(), SMOTE(), GeometricSMOTE()]\npipelines = []\noversamplers_param_grids = {\n    \"SMOTE\": {\n        \"smote__k_neighbors\": [\n            NearestNeighbors(n_neighbors=2),\n            NearestNeighbors(n_neighbors=3),\n        ]\n    },\n    \"GeometricSMOTE\": {\n        \"geometricsmote__k_neighbors\": [2, 3],\n        \"geometricsmote__deformation_factor\": [0.0, 0.25, 0.5, 0.75, 1.0],\n    },\n}\ncv = StratifiedKFold(n_splits=2, shuffle=True, random_state=rnd_seed + 5)\nfor classifier in classifiers:\n    for oversampler in oversamplers:\n        oversampler_name = (\n            oversampler.__class__.__name__ if oversampler is not None else None\n        )\n        param_grid = oversamplers_param_grids.get(oversampler_name, {})\n        estimator = (\n            make_pipeline(oversampler, classifier)\n            if oversampler is not None\n            else make_pipeline(classifier)\n        )\n        pipelines.append(GridSearchCV(estimator, param_grid, cv=cv, scoring=\"f1\"))\n\nFinally, we will calculate the nested cross-validation scores of the above pipelines using F-score as evaluation metric:\n\nn_runs = 3\ncv_scores = []\nfor run_id in range(n_runs):\n    for dataset_id, (X, y) in enumerate(datasets):\n        for pipeline_id, pipeline in enumerate(pipelines):\n            for param in pipeline.get_params():\n                if param.endswith(\"__n_jobs\") and param != \"estimator__smote__n_jobs\":\n                    pipeline.set_params(**{param: -1})\n                if param.endswith(\"__random_state\"):\n                    pipeline.set_params(\n                        **{\n                            param: rnd_seed\n                            * (run_id + 1)\n                            * (dataset_id + 1)\n                            * (pipeline_id + 1)\n                        }\n                    )\n            cv = StratifiedKFold(n_splits=3, shuffle=True, random_state=10 * run_id)\n            scores = cross_val_score(\n                estimator=pipeline,\n                X=X,\n                y=y,\n                scoring=\"f1\",\n                cv=cv,\n            )\n            print(f\"Run: {run_id} | Dataset: {dataset_id} | Pipeline: {pipeline_id}\")\n            pipeline_name = '-'.join(\n                [\n                    estimator.__class__.__name__\n                    for _, estimator in pipeline.get_params()['estimator'].get_params()[\n                        'steps'\n                    ]\n                ]\n            )\n            cv_scores.append((run_id, dataset_id, pipeline_name, scores.mean()))\n\nLet’s see the final results of the experiment:\n\ncv_scores = (\n    pd.DataFrame(cv_scores, columns=[\"Run\", \"Dataset\", \"Pipeline\", \"Score\"])\n    .groupby([\"Dataset\", \"Pipeline\"])[\"Score\"]\n    .mean()\n    .reset_index()\n)\ncv_scores\n\n\n\n\n\n\n\n\nDataset\nPipeline\nScore\n\n\n\n\n0\n0\nGeometricSMOTE-KNeighborsClassifier\n0.617232\n\n\n1\n0\nGeometricSMOTE-LogisticRegression\n0.281625\n\n\n2\n0\nKNeighborsClassifier\n0.515543\n\n\n3\n0\nLogisticRegression\n0.001622\n\n\n4\n0\nRandomOverSampler-KNeighborsClassifier\n0.586250\n\n\n5\n0\nRandomOverSampler-LogisticRegression\n0.282728\n\n\n6\n0\nSMOTE-KNeighborsClassifier\n0.579605\n\n\n7\n0\nSMOTE-LogisticRegression\n0.281004\n\n\n8\n1\nGeometricSMOTE-KNeighborsClassifier\n0.487351\n\n\n9\n1\nGeometricSMOTE-LogisticRegression\n0.186105\n\n\n10\n1\nKNeighborsClassifier\n0.316577\n\n\n11\n1\nLogisticRegression\n0.003130\n\n\n12\n1\nRandomOverSampler-KNeighborsClassifier\n0.460189\n\n\n13\n1\nRandomOverSampler-LogisticRegression\n0.188722\n\n\n14\n1\nSMOTE-KNeighborsClassifier\n0.428110\n\n\n15\n1\nSMOTE-LogisticRegression\n0.189665\n\n\n16\n2\nGeometricSMOTE-KNeighborsClassifier\n0.619463\n\n\n17\n2\nGeometricSMOTE-LogisticRegression\n0.296189\n\n\n18\n2\nKNeighborsClassifier\n0.522802\n\n\n19\n2\nLogisticRegression\n0.006476\n\n\n20\n2\nRandomOverSampler-KNeighborsClassifier\n0.592432\n\n\n21\n2\nRandomOverSampler-LogisticRegression\n0.290737\n\n\n22\n2\nSMOTE-KNeighborsClassifier\n0.580532\n\n\n23\n2\nSMOTE-LogisticRegression\n0.294199\n\n\n24\n3\nGeometricSMOTE-KNeighborsClassifier\n0.460700\n\n\n25\n3\nGeometricSMOTE-LogisticRegression\n0.191214\n\n\n26\n3\nKNeighborsClassifier\n0.323485\n\n\n27\n3\nLogisticRegression\n0.006260\n\n\n28\n3\nRandomOverSampler-KNeighborsClassifier\n0.454507\n\n\n29\n3\nRandomOverSampler-LogisticRegression\n0.195133\n\n\n30\n3\nSMOTE-KNeighborsClassifier\n0.428896\n\n\n31\n3\nSMOTE-LogisticRegression\n0.192810\n\n\n\n\n\n\n\nThe next table shows the pipeline with the highest F-score per dataset:\n\ncv_scores_best = cv_scores.loc[cv_scores.groupby(\"Dataset\")[\"Score\"].idxmax()]\ncv_scores_best\n\n\n\n\n\n\n\n\nDataset\nPipeline\nScore\n\n\n\n\n0\n0\nGeometricSMOTE-KNeighborsClassifier\n0.617232\n\n\n8\n1\nGeometricSMOTE-KNeighborsClassifier\n0.487351\n\n\n16\n2\nGeometricSMOTE-KNeighborsClassifier\n0.619463\n\n\n24\n3\nGeometricSMOTE-KNeighborsClassifier\n0.460700\n\n\n\n\n\n\n\nTherefore, Geometric SMOTE outperforms the other methods in all datasets when the F-score is used as an evaluation metric."
  },
  {
    "objectID": "posts/prefect/index.html",
    "href": "posts/prefect/index.html",
    "title": "Prefect",
    "section": "",
    "text": "Introduction\nPrefect is a workflow orchestration tool. It makes accessible the creation, scheduling, and monitoring of complex data pipelines. The workflows are defined as Python code, while Prefect provides error handling, retry mechanisms, and a user-friendly dashboard for monitoring.\n\n\nWorkflow for soccer data\nAs an example, let’s assume that we would like to create a data workflow that downloads, stores and updates historical and fixtures soccer data from Football-Data.co.uk. The URL of each of those main leagues has the following form:\n\nbase_url = 'https://www.football-data.co.uk/mmz4281/{season}/{league_id}.csv'\nbase_url\n\n'https://www.football-data.co.uk/mmz4281/{season}/{league_id}.csv'\n\n\nwhere season is the season of the league and league_id is the league ID. Let’s select a few of those seasons and leagues:\n\nSEASONS = ['1819', '1920', '2021', '2122', '2223', '2324']\nLEAGUES_MAPPING = {\n    'E0': 'English',\n    'SC0': 'Scotish',\n    'D1': 'German',\n    'I1': 'Italian',\n    'SP1': 'Spanish',\n    'F1': 'French',\n    'N1': 'Dutch',\n}\nURLS_MAPPING = {\n    f'https://www.football-data.co.uk/mmz4281/{season}/{league_id}.csv': (\n        league,\n        '-'.join([season[0:2], season[2:]]),\n    )\n    for season in SEASONS\n    for league_id, league in LEAGUES_MAPPING.items()\n}\nFIXTURES_URL = 'https://www.football-data.co.uk/fixtures.csv'\n\nOur workflow will include the following tasks:\n\nCheck if a local SQLite database exists. If not, then create it.\nCheck if the database is updated with the latest historical data. If the historical data do not exist, download all the data and store them to the database while if the historical data are not updated, download only the latest data and update the database.\nDownload the latest fixtures data and store them to the database.\n\n\n\nTasks\nThe above tasks represent discrete units of work, and they will receive the task decorator. We will also use an asynchronous httpx client to concurrently download the data since we have multiple files.\nThe function create_db implements the first task:\n\nimport sqlite3\nfrom prefect import task\nfrom prefect.logging import get_run_logger\nfrom pathlib import Path\nfrom tempfile import mkdtemp\n\nTEMP_DIR = Path(mkdtemp())\n\n\n@task(name='Create database', description='Create the database to store the data')\ndef create_db():\n    logger = get_run_logger()\n    db_path = TEMP_DIR / 'soccer_data.db'\n    try:\n        con = sqlite3.connect(f'file:{db_path}?mode=rw', uri=True)\n        logger.info('Database exists.')\n    except sqlite3.OperationalError:\n        con = sqlite3.connect(db_path)\n        logger.info('Database created.')\n    finally:\n        con.close()\n\nThe function update_historical_data implements the second task:\n\nimport httpx\nimport asyncio\nimport pandas as pd\nfrom io import StringIO\n\n\nasync def request_csv_data(client: httpx.Client, url: str, **kwargs):\n    return await client.get(url=url)\n\n\nasync def download_csvs_data(urls_mapping: dict[str, tuple[str, str]]):\n    async with httpx.AsyncClient(limits=httpx.Limits(max_connections=30)) as client:\n        requests = [\n            request_csv_data(client, url, league=league, season=season)\n            for url, (league, season) in urls_mapping.items()\n        ]\n        responses = await asyncio.gather(*requests)\n    csvs_data = [\n        StringIO(str(response.content, encoding='windows-1254'))\n        for response in responses\n    ]\n    return csvs_data\n\n\n@task(\n    name='Update historical data',\n    description='Fetch latest data to update historical data',\n)\nasync def update_historical_data(urls_mapping):\n    logger = get_run_logger()\n    db_path = TEMP_DIR / 'soccer_data.db'\n    with sqlite3.connect(db_path) as con:\n        try:\n            data = pd.read_sql('SELECT * FROM historical', con)\n            logger.info(f'Table with historical data exists. Shape: {data.shape}')\n        except pd.errors.DatabaseError:\n            logger.info('Table with historical data does not exist.')\n            csvs_data = await download_csvs_data(urls_mapping)\n            data = pd.concat(\n                [\n                    pd.read_csv(csv_data, encoding='windows-1254')\n                    for csv_data in csvs_data\n                ],\n                ignore_index=True,\n            )\n            data.to_sql('historical', con=con, index=False)\n            logger.info(f'Table with historical data was created. Shape: {data.shape}')\n            return None\n    urls_mapping = {\n        url: (league, season)\n        for url, (league, season) in urls_mapping.items()\n        if season == '23-24'\n    }\n    latest_csvs_data = await download_csvs_data(urls_mapping)\n    latest_data = pd.concat(\n        [\n            pd.read_csv(csv_data, encoding='windows-1254')\n            for csv_data in latest_csvs_data\n        ],\n        ignore_index=True,\n    )\n    data = pd.concat([data, latest_data], ignore_index=True).drop_duplicates(\n        subset=['Div', 'Date', 'HomeTeam', 'AwayTeam', 'Time'], ignore_index=True\n    )\n    data.to_sql('historical', con=con, index=False, if_exists='replace')\n    logger.info(f'Table with historical data was updated. Shape: {data.shape}')\n\nThe function update_fixtures_data implements the third task:\n\n@task(name='Update fixtures data', description='Fetch latest fixtures data')\nasync def update_fixtures_data():\n    logger = get_run_logger()\n    db_path = TEMP_DIR / 'soccer_data.db'\n    data = pd.read_csv(FIXTURES_URL)\n    with sqlite3.connect(db_path) as con:\n        data.to_sql('fixtures', con=con, index=False, if_exists='replace')\n        logger.info(f'Fixtures data were updated. Shape: {data.shape}')\n\n\n\nFlow\nThe full data workflow will receive the flow decorator.\n\nfrom prefect import flow\nfrom prefect.task_runners import ConcurrentTaskRunner\n\n\n@flow(\n    name='Download asynchronously the data and update the database',\n    validate_parameters=True,\n    task_runner=ConcurrentTaskRunner(),\n    log_prints=True,\n)\nasync def update_db(urls_mapping: dict[str, tuple[str, str]]):\n    create_db()\n    await update_historical_data(urls_mapping)\n    await update_fixtures_data()\n\n\n\nResults\nWe can run the above flow:\n\nawait update_db(URLS_MAPPING)\n\n15:45:48.090 | INFO    | prefect.engine - View at https://app.prefect.cloud/account/b258155a-2005-491c-96d1-e0ffa5f1d8f1/workspace/89cadadb-5990-4d0d-9536-3c50d73b387a/runs/flow-run/64bcfbcc-1b44-4dcf-a5e9-26f1a73ef985\n\n\n\n15:45:48.503 | INFO    | Flow run 'invisible-horse' - Beginning flow run 'invisible-horse' for flow 'Download asynchronously the data and update the database'\n\n\n\n15:45:48.506 | INFO    | Flow run 'invisible-horse' - View at https://app.prefect.cloud/account/b258155a-2005-491c-96d1-e0ffa5f1d8f1/workspace/89cadadb-5990-4d0d-9536-3c50d73b387a/runs/flow-run/64bcfbcc-1b44-4dcf-a5e9-26f1a73ef985\n\n\n\n15:45:48.541 | INFO    | Task run 'Create database-6d6' - Database created.\n\n\n\n15:45:48.543 | INFO    | Task run 'Create database-6d6' - Finished in state Completed()\n\n\n\n15:45:48.547 | INFO    | Task run 'Update historical data-e94' - Table with historical data does not exist.\n\n\n\n15:45:50.541 | INFO    | Task run 'Update historical data-e94' - Table with historical data was created. Shape: (13862, 124)\n\n\n\n15:45:50.542 | INFO    | Task run 'Update historical data-e94' - Finished in state Completed()\n\n\n\n15:45:50.869 | INFO    | Task run 'Update fixtures data-727' - Fixtures data were updated. Shape: (178, 102)\n\n\n\n15:45:50.872 | INFO    | Task run 'Update fixtures data-727' - Finished in state Completed()\n\n\n\n15:45:51.098 | INFO    | Flow run 'invisible-horse' - Finished in state Completed()\n\n\n\nLet’s read the data from the database:\n\nfrom shutil import rmtree\n\ndb_path = TEMP_DIR / 'soccer_data.db'\nwith sqlite3.connect(db_path) as con:\n    historical_data = pd.read_sql('SELECT * FROM historical', con)\n    fixtures_data = pd.read_sql('SELECT * FROM fixtures', con)\nrmtree(TEMP_DIR)\n\nThe historical data:\n\nhistorical_data\n\n\n\n\n\n\n\n\nDiv\nDate\nHomeTeam\nAwayTeam\nFTHG\nFTAG\nFTR\nHTHG\nHTAG\nHTR\n...\nAvgC&lt;2.5\nAHCh\nB365CAHH\nB365CAHA\nPCAHH\nPCAHA\nMaxCAHH\nMaxCAHA\nAvgCAHH\nAvgCAHA\n\n\n\n\n0\nE0\n10/08/2018\nMan United\nLeicester\n2\n1\nH\n1\n0\nH\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nE0\n11/08/2018\nBournemouth\nCardiff\n2\n0\nH\n1\n0\nH\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\nE0\n11/08/2018\nFulham\nCrystal Palace\n0\n2\nA\n0\n1\nA\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\nE0\n11/08/2018\nHuddersfield\nChelsea\n0\n3\nA\n0\n2\nA\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nE0\n11/08/2018\nNewcastle\nTottenham\n1\n2\nA\n1\n2\nA\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n13857\nN1\n19/05/2024\nPSV Eindhoven\nWaalwijk\n3\n1\nH\n1\n1\nD\n...\n5.69\n-2.50\n1.73\n2.08\n1.77\n2.09\n1.98\n2.17\n1.85\n1.99\n\n\n13858\nN1\n19/05/2024\nSparta Rotterdam\nHeerenveen\n2\n1\nH\n0\n0\nD\n...\n2.87\n-0.75\n1.85\n2.05\n1.86\n2.03\n1.90\n2.12\n1.83\n2.00\n\n\n13859\nN1\n19/05/2024\nVitesse\nAjax\n2\n2\nD\n1\n1\nD\n...\n3.43\n1.00\n1.84\n2.06\n1.84\n2.06\n1.88\n2.11\n1.82\n2.02\n\n\n13860\nN1\n19/05/2024\nVolendam\nGo Ahead Eagles\n1\n2\nA\n1\n1\nD\n...\n3.52\n1.25\n1.78\n2.03\n1.83\n2.07\n1.85\n2.12\n1.81\n2.02\n\n\n13861\nN1\n19/05/2024\nZwolle\nTwente\n1\n2\nA\n0\n0\nD\n...\n3.30\n1.50\n1.97\n1.93\n1.97\n1.92\n2.14\n1.93\n2.01\n1.83\n\n\n\n\n13862 rows × 124 columns\n\n\n\nThe fixtures data:\n\nfixtures_data\n\n\n\n\n\n\n\n\nDiv\nDate\nTime\nHomeTeam\nAwayTeam\nReferee\nB365H\nB365D\nB365A\nBWH\n...\nB365CAHH\nB365CAHA\nPCAHH\nPCAHA\nMaxCAHH\nMaxCAHA\nAvgCAHH\nAvgCAHA\nBFECAHH\nBFECAHA\n\n\n\n\n0\nB1\n28/02/2025\n19:45\nCharleroi\nGenk\nNone\n2.55\n3.4\n2.63\nNone\n...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n1\nB1\n01/03/2025\n15:00\nCercle Brugge\nAntwerp\nNone\n2.38\n3.4\n2.75\nNone\n...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n2\nB1\n01/03/2025\n15:00\nGent\nClub Brugge\nNone\n4.10\n4.0\n1.73\nNone\n...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n3\nB1\n01/03/2025\n17:15\nSt Truiden\nKortrijk\nNone\n1.75\n3.6\n4.33\nNone\n...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n4\nB1\n01/03/2025\n19:45\nSt. Gilloise\nDender\nNone\n1.33\n5.0\n8.00\nNone\n...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n173\nT1\n02/03/2025\n17:30\nFenerbahce\nAntalyaspor\nNone\n1.27\n6.5\n8.50\nNone\n...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n174\nT1\n03/03/2025\n13:00\nGaziantep\nEyupspor\nNone\n2.30\n3.4\n3.00\nNone\n...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n175\nT1\n03/03/2025\n13:00\nKonyaspor\nTrabzonspor\nNone\n2.63\n3.3\n2.63\nNone\n...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n176\nT1\n03/03/2025\n17:30\nBuyuksehyr\nSivasspor\nNone\n1.67\n4.0\n4.75\nNone\n...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n177\nT1\n03/03/2025\n17:30\nGoztep\nSamsunspor\nNone\n2.00\n3.4\n3.75\nNone\n...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n\n\n178 rows × 102 columns\n\n\n\n\n\nFinal thoughts\nYou can spin up a local Prefect server UI with the prefect server start command in the shell and explore the characteristics of the above Prefect flow we ran. The data are stored in the Prefect database which by default is a local SQLite database.\nPrefect also supports deployments i.e. packaging workflow code, settings, and infrastructure configuration so that the data workflow can be managed via the Prefect API and run remotely by a Prefect agent.\nYou can read more at the official Prefect documentation."
  },
  {
    "objectID": "presentations/symbolic_computation_in_physics_with_python_2/index.html#basics",
    "href": "presentations/symbolic_computation_in_physics_with_python_2/index.html#basics",
    "title": "Symbolic Computation in Theoretical Physics with Python",
    "section": "Basics",
    "text": "Basics\nFundamental operations, symbolic computation, and core mathematical structures.\n\nArithmetic operations\nSupport for basic arithmetic operations:\n\n# Basic arithmetic operations\n\n((3 + 5) / 8) - 2.5 ^ 3\n\n\\(\\displaystyle -14.6250000000000\\)\n\n\n\n\nSymbolic expressions\nSupport for symbolic expressions:\n\n# Symbolic variables definition\n\nvar('x y')\n\n\\(\\displaystyle \\left(x, y\\right)\\)\n\n\n\n# Symbolic expressions simplification\n\nexpr = (x^2 + x) / x\nexpr.simplify_full()\n\n\\(\\displaystyle x + 1\\)\n\n\n\n\nCalculus\nSageMath provides tools for symbolic calculus such as differentiation and integration. You can compute derivatives and integrals of functions symbolically:\n\n# Define function\n\nf = x^2 + 3 * x + 2\nf\n\n\\(\\displaystyle x^{2} + 3 \\, x + 2\\)\n\n\n\n# Differentiate with respect to x\n\ndiff(f, x)\n\n\\(\\displaystyle 2 \\, x + 3\\)\n\n\n\n# Integrate with respect to x\n\nintegrate(f, x)\n\n\\(\\displaystyle \\frac{1}{3} \\, x^{3} + \\frac{3}{2} \\, x^{2} + 2 \\, x\\)\n\n\n\n# Plot of the function\n\nplot(f, (x, -5, 5))\n\n\n\n\n\n\n\n\n\n\nDifferential equations\nSageMath can solve differential equations symbolically:\n\n# Define a differential equation\n\ny = function('y')(x)\ndeqn = (diff(y, x) + y == sin(x))\ndeqn\n\n\\(\\displaystyle y\\left(x\\right) + \\frac{\\partial}{\\partial x}y\\left(x\\right) = \\sin\\left(x\\right)\\)\n\n\n\n# Solve the differential equation\n\ndesolve(deqn, y)\n\n\\(\\displaystyle -\\frac{1}{2} \\, {\\left({\\left(\\cos\\left(x\\right) - \\sin\\left(x\\right)\\right)} e^{x} - 2 \\, C\\right)} e^{\\left(-x\\right)}\\)\n\n\n\n\nLinear algebra\nSageMath handles matrix operations, such as addition, multiplication, and finding eigenvalues:\n\n# Define matrix A\n\nA = Matrix([[1, 2], [3, 4], [5, 6]])  \nA\n\n\\(\\displaystyle \\left(\\begin{array}{rr}\n1 & 2 \\\\\n3 & 4 \\\\\n5 & 6\n\\end{array}\\right)\\)\n\n\n\n# Define matrix B\n\nB = Matrix([[7, 8, 9], [9, 10, 11],])\nB\n\n\\(\\displaystyle \\left(\\begin{array}{rrr}\n7 & 8 & 9 \\\\\n9 & 10 & 11\n\\end{array}\\right)\\)\n\n\n\n# Matrix multiplication\n\nA * B\n\n\\(\\displaystyle \\left(\\begin{array}{rrr}\n25 & 28 & 31 \\\\\n57 & 64 & 71 \\\\\n89 & 100 & 111\n\\end{array}\\right)\\)\n\n\n\n# Define matrix C\n\nC = Matrix([[1, 0], [0, 2]])  \nC\n\n\\(\\displaystyle \\left(\\begin{array}{rr}\n1 & 0 \\\\\n0 & 2\n\\end{array}\\right)\\)\n\n\n\n# Eigenvalue equation\n\nC.eigenvectors_right()\n\n\\(\\displaystyle \\left[\\left(2, \\left[\\left(0,\\,1\\right)\\right], 1\\right), \\left(1, \\left[\\left(1,\\,0\\right)\\right], 1\\right)\\right]\\)\n\n\n\n# Validation of eigenvalue equation\n\nfor eigenvalue, (eigenvector, *_), _ in C.eigenvectors_right():\n    display((C, eigenvector, eigenvalue, C * eigenvector == eigenvalue * eigenvector))\n\n\\(\\displaystyle \\left(\\left(\\begin{array}{rr}\n1 & 0 \\\\\n0 & 2\n\\end{array}\\right), \\left(0,\\,1\\right), 2, \\mathrm{True}\\right)\\)\n\n\n\\(\\displaystyle \\left(\\left(\\begin{array}{rr}\n1 & 0 \\\\\n0 & 2\n\\end{array}\\right), \\left(1,\\,0\\right), 1, \\mathrm{True}\\right)\\)\n\n\n\n\nGroup theory\nSageMath includes tools for working with groups:\n\n# Define the symmetric group S3\n\nG = SymmetricGroup(3)\nG\n\n\\(\\displaystyle \\langle (1,2,3), (1,2) \\rangle\\)\n\n\n\n# Get the order of S3\n\nG.order()\n\n\\(\\displaystyle 6\\)\n\n\n\n# List the elements of S3\n\nG.list()\n\n\\(\\displaystyle \\left[1, (1,3,2), (1,2,3), (2,3), (1,3), (1,2)\\right]\\)\n\n\n\n# Standard representation of S3\n\n[g.matrix() for g in G]\n\n\\(\\displaystyle \\left[\\left(\\begin{array}{rrr}\n1 & 0 & 0 \\\\\n0 & 1 & 0 \\\\\n0 & 0 & 1\n\\end{array}\\right), \\left(\\begin{array}{rrr}\n0 & 0 & 1 \\\\\n1 & 0 & 0 \\\\\n0 & 1 & 0\n\\end{array}\\right), \\left(\\begin{array}{rrr}\n0 & 1 & 0 \\\\\n0 & 0 & 1 \\\\\n1 & 0 & 0\n\\end{array}\\right), \\left(\\begin{array}{rrr}\n1 & 0 & 0 \\\\\n0 & 0 & 1 \\\\\n0 & 1 & 0\n\\end{array}\\right), \\left(\\begin{array}{rrr}\n0 & 0 & 1 \\\\\n0 & 1 & 0 \\\\\n1 & 0 & 0\n\\end{array}\\right), \\left(\\begin{array}{rrr}\n0 & 1 & 0 \\\\\n1 & 0 & 0 \\\\\n0 & 0 & 1\n\\end{array}\\right)\\right]\\)\n\n\n\n\nDifferentiable manifolds\nSageMath allows for computations in differential geometry, including tangent vectors, differential forms, and more:\n\n# Declare the spacetime manifold M\n\nS2 = manifolds.Sphere(2)\nS2\n\n\\(\\displaystyle \\mathbb{S}^{2}\\)\n\n\n\n# Spherical coordinates\n\nS2.spherical_coordinates()\n\n\\(\\displaystyle \\left(A,(\\theta, \\phi)\\right)\\)\n\n\n\n# Metric\n\nS2.metric().display()\n\n\\(\\displaystyle g = \\mathrm{d} \\theta\\otimes \\mathrm{d} \\theta + \\sin\\left(\\theta\\right)^{2} \\mathrm{d} \\phi\\otimes \\mathrm{d} \\phi\\)"
  },
  {
    "objectID": "presentations/symbolic_computation_in_physics_with_python_2/index.html#advanced",
    "href": "presentations/symbolic_computation_in_physics_with_python_2/index.html#advanced",
    "title": "Symbolic Computation in Theoretical Physics with Python",
    "section": "Advanced",
    "text": "Advanced\nExploring advanced mathematics in SageMath, including group theory, manifolds, Lie groups, and Lie algebras. This section broadly follows (Keski-Vakkuri, Montonen, and Panero 2022).\n\nGroup theory\nWe begin by exploring finite groups, followed by an introduction to free groups and their presentation. Finally, we examine continuous groups and group actions.\n\nSmallest finite groups\nWe present the list of all groups of finite order \\(N \\leq 8\\).\n\nOrder N = 1\n\n# Z1\n\nZ1 = CyclicPermutationGroup(1)\nZ1.list()\n\n\\(\\displaystyle \\left[1\\right]\\)\n\n\n\n\nOrder N = 2\n\n# Z2\n\nZ2 = CyclicPermutationGroup(2)\nZ2.list()\n\n\\(\\displaystyle \\left[1, (1,2)\\right]\\)\n\n\n\n# Z2 Cayley table\n\nprint(Z2.cayley_table())\n\n*  a b\n +----\na| a b\nb| b a\n\n\n\n\n# S2\n\nS2 = SymmetricGroup(2)\nS2.list()\n\n\\(\\displaystyle \\left[1, (1,2)\\right]\\)\n\n\n\n# S2 Cayley table\n\nprint(S2.cayley_table())\n\n*  a b\n +----\na| a b\nb| b a\n\n\n\n\n# Z2, S2 isomorphic\n\nassert S2.is_isomorphic(Z2)\n\n\n\nOrder N = 3\n\n# Z3\n\nZ3 = CyclicPermutationGroup(3)\nZ3.list()\n\n\\(\\displaystyle \\left[1, (1,2,3), (1,3,2)\\right]\\)\n\n\n\n# Z3 Cayley table\n\nprint(Z3.cayley_table())\n\n*  a b c\n +------\na| a b c\nb| b c a\nc| c a b\n\n\n\n\n\nOrder N = 4\n\n# Z4\n\nZ4 = CyclicPermutationGroup(4)\nZ4.list()\n\n\\(\\displaystyle \\left[1, (1,2,3,4), (1,3)(2,4), (1,4,3,2)\\right]\\)\n\n\n\n# Z4 Cayley table\n\nprint(Z4.cayley_table())\n\n*  a b c d\n +--------\na| a b c d\nb| b c d a\nc| c d a b\nd| d a b c\n\n\n\n\n# Z4 cyclic\n\nassert Z4.is_cyclic()\n\n\n# Klein four-group\n\nK4G = direct_product_permgroups([Z2, Z2])\nK4G.list()\n\n\\(\\displaystyle \\left[1, (1,2), (3,4), (1,2)(3,4)\\right]\\)\n\n\n\n# Klein four-group Cayley table\n\nprint(K4G.cayley_table())\n\n*  a b c d\n +--------\na| a b c d\nb| b a d c\nc| c d a b\nd| d c b a\n\n\n\n\n# Klein four-group cyclic\n\nassert not K4G.is_cyclic()\n\n\n\nOrder N = 5\n\n# Z5\n\nZ5 = CyclicPermutationGroup(5)\nZ5.list()\n\n\\(\\displaystyle \\left[1, (1,2,3,4,5), (1,3,5,2,4), (1,4,2,5,3), (1,5,4,3,2)\\right]\\)\n\n\n\n# Z5 Cayley table\n\nprint(Z5.cayley_table())\n\n*  a b c d e\n +----------\na| a b c d e\nb| b c d e a\nc| c d e a b\nd| d e a b c\ne| e a b c d\n\n\n\n\n\nOrder N = 6\n\n# Z6\n\nZ6 = CyclicPermutationGroup(6)\nZ6.list()\n\n\\(\\displaystyle \\left[1, (1,2,3,4,5,6), (1,3,5)(2,4,6), (1,4)(2,5)(3,6), (1,5,3)(2,6,4), (1,6,5,4,3,2)\\right]\\)\n\n\n\n# Z6 Cayley table\n\nprint(Z6.cayley_table())\n\n*  a b c d e f\n +------------\na| a b c d e f\nb| b c d e f a\nc| c d e f a b\nd| d e f a b c\ne| e f a b c d\nf| f a b c d e\n\n\n\n\n# Z2 x Z3\n\nZ2xZ3 = direct_product_permgroups([Z2, Z3])\nZ2xZ3.list()\n\n\\(\\displaystyle \\left[1, (1,2), (3,5,4), (1,2)(3,5,4), (3,4,5), (1,2)(3,4,5)\\right]\\)\n\n\n\n# Z2 x Z3 Cayley table\n\nprint(Z2xZ3.cayley_table())\n\n*  a b c d e f\n +------------\na| a b c d e f\nb| b c a e f d\nc| c a b f d e\nd| d e f a b c\ne| e f d b c a\nf| f d e c a b\n\n\n\n\n# S3\n\nS3 = SymmetricGroup(3)\nS3.list()\n\n\\(\\displaystyle \\left[1, (1,3,2), (1,2,3), (2,3), (1,3), (1,2)\\right]\\)\n\n\n\n# S3 Cayley table\n\nprint(S3.cayley_table())\n\n*  a b c d e f\n +------------\na| a b c d e f\nb| b a d c f e\nc| c e a f b d\nd| d f b e a c\ne| e c f a d b\nf| f d e b c a\n\n\n\n\n# Z6, Z2 x Z3 isomorphic\n\nassert Z6.is_isomorphic(Z2xZ3)\n\n\n# S3, Z6 non-isomorphic\n\nassert not S3.is_isomorphic(Z6)\n\n\n# S3, Z2 x Z3 non-isomorphic\n\nassert not S3.is_isomorphic(Z2xZ3)\n\n\n# Z6 cyclic\n\nassert Z6.is_cyclic()\n\n\n# Z2 x Z3 cyclic\n\nassert Z2xZ3.is_cyclic()\n\n\n# S3 cyclic\n\nassert not S3.is_cyclic()\n\n\n# Z6 abelian\n\nassert Z6.is_abelian()\n\n\n# Z2 x Z3 abelian\n\nassert Z2xZ3.is_abelian()\n\n\n# S3 non-abelian\n\nassert not S3.is_abelian()\n\n\n\nOrder N = 7\n\n# Z7\n\nZ7 = CyclicPermutationGroup(7)\nZ7.list()\n\n\\(\\displaystyle \\left[1, (1,2,3,4,5,6,7), (1,3,5,7,2,4,6), (1,4,7,3,6,2,5), (1,5,2,6,3,7,4), (1,6,4,2,7,5,3), (1,7,6,5,4,3,2)\\right]\\)\n\n\n\n# Z7 Cayley table\n\nprint(Z7.cayley_table())\n\n*  a b c d e f g\n +--------------\na| a b c d e f g\nb| b c d e f g a\nc| c d e f g a b\nd| d e f g a b c\ne| e f g a b c d\nf| f g a b c d e\ng| g a b c d e f\n\n\n\n\n\nOrder N = 8\n\n# Z8\n\nZ8 = CyclicPermutationGroup(8)\nZ8.list()\n\n\\(\\displaystyle \\left[1, (1,2,3,4,5,6,7,8), (1,3,5,7)(2,4,6,8), (1,4,7,2,5,8,3,6), (1,5)(2,6)(3,7)(4,8), (1,6,3,8,5,2,7,4), (1,7,5,3)(2,8,6,4), (1,8,7,6,5,4,3,2)\\right]\\)\n\n\n\n# Z8 Cayley table\n\nprint(Z8.cayley_table())\n\n*  a b c d e f g h\n +----------------\na| a b c d e f g h\nb| b c d e f g h a\nc| c d e f g h a b\nd| d e f g h a b c\ne| e f g h a b c d\nf| f g h a b c d e\ng| g h a b c d e f\nh| h a b c d e f g\n\n\n\n\n# Z4 x Z2\n\nZ4xZ2 = direct_product_permgroups([Z4, Z2])\nZ4xZ2.list()\n\n\\(\\displaystyle \\left[1, (1,3)(2,4), (1,4,3,2), (1,2,3,4), (5,6), (1,3)(2,4)(5,6), (1,4,3,2)(5,6), (1,2,3,4)(5,6)\\right]\\)\n\n\n\n# Z4xZ2 Cayley table\n\nprint(Z4xZ2.cayley_table())\n\n*  a b c d e f g h\n +----------------\na| a b c d e f g h\nb| b a d c f e h g\nc| c d e f g h a b\nd| d c f e h g b a\ne| e f g h a b c d\nf| f e h g b a d c\ng| g h a b c d e f\nh| h g b a d c f e\n\n\n\n\n# Z2 x Z2 x Z2\n\nZ2xZ2xZ2 = direct_product_permgroups([Z2, Z2, Z2])\nZ2xZ2xZ2.list()\n\n\\(\\displaystyle \\left[1, (1,2), (3,4), (1,2)(3,4), (5,6), (1,2)(5,6), (3,4)(5,6), (1,2)(3,4)(5,6)\\right]\\)\n\n\n\n# Z2xZ2xZ2 Cayley table\n\nprint(Z2xZ2xZ2.cayley_table())\n\n*  a b c d e f g h\n +----------------\na| a b c d e f g h\nb| b a d c f e h g\nc| c d a b g h e f\nd| d c b a h g f e\ne| e f g h a b c d\nf| f e h g b a d c\ng| g h e f c d a b\nh| h g f e d c b a\n\n\n\n\n# D4\n\nD4 = DihedralGroup(4)\nD4.list()\n\n\\(\\displaystyle \\left[1, (1,3)(2,4), (1,4,3,2), (1,2,3,4), (2,4), (1,3), (1,4)(2,3), (1,2)(3,4)\\right]\\)\n\n\n\n# D4 Cayley table\n\nprint(D4.cayley_table())\n\n*  a b c d e f g h\n +----------------\na| a b c d e f g h\nb| b a d c f e h g\nc| c g a e d h b f\nd| d h b f c g a e\ne| e f g h a b c d\nf| f e h g b a d c\ng| g c e a h d f b\nh| h d f b g c e a\n\n\n\n\n# Q\n\nQ = QuaternionGroup()\nQ.list()\n\n\\(\\displaystyle \\left[1, (1,3)(2,4)(5,7)(6,8), (1,4,3,2)(5,8,7,6), (1,2,3,4)(5,6,7,8), (1,7,3,5)(2,6,4,8), (1,5,3,7)(2,8,4,6), (1,8,3,6)(2,7,4,5), (1,6,3,8)(2,5,4,7)\\right]\\)\n\n\n\n# Q Cayley table\n\nprint(Q.cayley_table())\n\n*  a b c d e f g h\n +----------------\na| a b c d e f g h\nb| b c d a h e f g\nc| c d a b g h e f\nd| d a b c f g h e\ne| e f g h c d a b\nf| f g h e b c d a\ng| g h e f a b c d\nh| h e f g d a b c\n\n\n\n\n# Z8, Z4 x Z2, Z2 x Z2 x Z2, D4, Q  non-isomorphic\n\nfrom itertools import combinations\ngroups = [Z8, Z4xZ2, Z2xZ2xZ2, D4, Q]\nfor group1, group2 in combinations(groups, 2):\n    if not group1.is_isomorphic(group2):\n        display(f'{group1}, {group2} are not isomorphic.')\n\n\\(\\displaystyle \\verb|Cyclic|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|8|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group,|\\verb| |\\verb|Permutation|\\verb| |\\verb|Group|\\verb| |\\verb|with|\\verb| |\\verb|generators|\\verb| |\\verb|[(1,2,3,4),|\\verb| |\\verb|(5,6)]|\\verb| |\\verb|are|\\verb| |\\verb|not|\\verb| |\\verb|isomorphic.|\\)\n\n\n\\(\\displaystyle \\verb|Cyclic|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|8|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group,|\\verb| |\\verb|Permutation|\\verb| |\\verb|Group|\\verb| |\\verb|with|\\verb| |\\verb|generators|\\verb| |\\verb|[(1,2),|\\verb| |\\verb|(3,4),|\\verb| |\\verb|(5,6)]|\\verb| |\\verb|are|\\verb| |\\verb|not|\\verb| |\\verb|isomorphic.|\\)\n\n\n\\(\\displaystyle \\verb|Cyclic|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|8|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group,|\\verb| |\\verb|Dihedral|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|8|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group|\\verb| |\\verb|are|\\verb| |\\verb|not|\\verb| |\\verb|isomorphic.|\\)\n\n\n\\(\\displaystyle \\verb|Cyclic|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|8|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group,|\\verb| |\\verb|Quaternion|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|8|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group|\\verb| |\\verb|are|\\verb| |\\verb|not|\\verb| |\\verb|isomorphic.|\\)\n\n\n\\(\\displaystyle \\verb|Permutation|\\verb| |\\verb|Group|\\verb| |\\verb|with|\\verb| |\\verb|generators|\\verb| |\\verb|[(1,2,3,4),|\\verb| |\\verb|(5,6)],|\\verb| |\\verb|Permutation|\\verb| |\\verb|Group|\\verb| |\\verb|with|\\verb| |\\verb|generators|\\verb| |\\verb|[(1,2),|\\verb| |\\verb|(3,4),|\\verb| |\\verb|(5,6)]|\\verb| |\\verb|are|\\verb| |\\verb|not|\\verb| |\\verb|isomorphic.|\\)\n\n\n\\(\\displaystyle \\verb|Permutation|\\verb| |\\verb|Group|\\verb| |\\verb|with|\\verb| |\\verb|generators|\\verb| |\\verb|[(1,2,3,4),|\\verb| |\\verb|(5,6)],|\\verb| |\\verb|Dihedral|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|8|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group|\\verb| |\\verb|are|\\verb| |\\verb|not|\\verb| |\\verb|isomorphic.|\\)\n\n\n\\(\\displaystyle \\verb|Permutation|\\verb| |\\verb|Group|\\verb| |\\verb|with|\\verb| |\\verb|generators|\\verb| |\\verb|[(1,2,3,4),|\\verb| |\\verb|(5,6)],|\\verb| |\\verb|Quaternion|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|8|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group|\\verb| |\\verb|are|\\verb| |\\verb|not|\\verb| |\\verb|isomorphic.|\\)\n\n\n\\(\\displaystyle \\verb|Permutation|\\verb| |\\verb|Group|\\verb| |\\verb|with|\\verb| |\\verb|generators|\\verb| |\\verb|[(1,2),|\\verb| |\\verb|(3,4),|\\verb| |\\verb|(5,6)],|\\verb| |\\verb|Dihedral|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|8|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group|\\verb| |\\verb|are|\\verb| |\\verb|not|\\verb| |\\verb|isomorphic.|\\)\n\n\n\\(\\displaystyle \\verb|Permutation|\\verb| |\\verb|Group|\\verb| |\\verb|with|\\verb| |\\verb|generators|\\verb| |\\verb|[(1,2),|\\verb| |\\verb|(3,4),|\\verb| |\\verb|(5,6)],|\\verb| |\\verb|Quaternion|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|8|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group|\\verb| |\\verb|are|\\verb| |\\verb|not|\\verb| |\\verb|isomorphic.|\\)\n\n\n\\(\\displaystyle \\verb|Dihedral|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|8|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group,|\\verb| |\\verb|Quaternion|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|8|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group|\\verb| |\\verb|are|\\verb| |\\verb|not|\\verb| |\\verb|isomorphic.|\\)\n\n\n\n# Z8 abelian\n\nassert Z8.is_abelian()\n\n\n# Z4 x Z2 abelian\n\nassert Z4xZ2.is_abelian()\n\n\n# Z2 x Z2 x Z2 abelian\n\nassert Z2xZ2xZ2.is_abelian()\n\n\n# D4 non-abelian\n\nassert not D4.is_abelian()\n\n\n# Q non-abelian\n\nassert not Q.is_abelian()\n\n\n# Q subgroups\n\nfor G in Q.subgroups():\n    display(G)\n\n\\(\\displaystyle \\hbox{Subgroup } \\langle 1 \\rangle \\hbox{ of } \\langle (1,2,3,4)(5,6,7,8), (1,5,3,7)(2,8,4,6) \\rangle\\)\n\n\n\\(\\displaystyle \\hbox{Subgroup } \\langle (1,3)(2,4)(5,7)(6,8) \\rangle \\hbox{ of } \\langle (1,2,3,4)(5,6,7,8), (1,5,3,7)(2,8,4,6) \\rangle\\)\n\n\n\\(\\displaystyle \\hbox{Subgroup } \\langle (1,3)(2,4)(5,7)(6,8), (1,5,3,7)(2,8,4,6) \\rangle \\hbox{ of } \\langle (1,2,3,4)(5,6,7,8), (1,5,3,7)(2,8,4,6) \\rangle\\)\n\n\n\\(\\displaystyle \\hbox{Subgroup } \\langle (1,3)(2,4)(5,7)(6,8), (1,2,3,4)(5,6,7,8) \\rangle \\hbox{ of } \\langle (1,2,3,4)(5,6,7,8), (1,5,3,7)(2,8,4,6) \\rangle\\)\n\n\n\\(\\displaystyle \\hbox{Subgroup } \\langle (1,3)(2,4)(5,7)(6,8), (1,6,3,8)(2,5,4,7) \\rangle \\hbox{ of } \\langle (1,2,3,4)(5,6,7,8), (1,5,3,7)(2,8,4,6) \\rangle\\)\n\n\n\\(\\displaystyle \\hbox{Subgroup } \\langle (1,3)(2,4)(5,7)(6,8), (1,5,3,7)(2,8,4,6), (1,2,3,4)(5,6,7,8) \\rangle \\hbox{ of } \\langle (1,2,3,4)(5,6,7,8), (1,5,3,7)(2,8,4,6) \\rangle\\)\n\n\n\n# Q proper subgroups\n\nfor G in Q.subgroups():\n    if G.order() == 2:\n        if G.is_isomorphic(Z2) and G.is_normal():\n            display(f'{G} is isomorphic to {Z2} and a normal subgroup of {Q}.')\n    elif G.order() == 4:\n        if G.is_isomorphic(Z4) and G.is_normal():\n            display(f'{G} is isomorphic to {Z4} and a normal subgroup of {Q}.')\n\n\\(\\displaystyle \\verb|Subgroup|\\verb| |\\verb|generated|\\verb| |\\verb|by|\\verb| |\\verb|[(1,3)(2,4)(5,7)(6,8)]|\\verb| |\\verb|of|\\verb| |\\verb|(Quaternion|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|8|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group)|\\verb| |\\verb|is|\\verb| |\\verb|isomorphic|\\verb| |\\verb|to|\\verb| |\\verb|Cyclic|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|2|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group|\\verb| |\\verb|and|\\verb| |\\verb|a|\\verb| |\\verb|normal|\\verb| |\\verb|subgroup|\\verb| |\\verb|of|\\verb| |\\verb|Quaternion|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|8|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group.|\\)\n\n\n\\(\\displaystyle \\verb|Subgroup|\\verb| |\\verb|generated|\\verb| |\\verb|by|\\verb| |\\verb|[(1,3)(2,4)(5,7)(6,8),|\\verb| |\\verb|(1,5,3,7)(2,8,4,6)]|\\verb| |\\verb|of|\\verb| |\\verb|(Quaternion|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|8|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group)|\\verb| |\\verb|is|\\verb| |\\verb|isomorphic|\\verb| |\\verb|to|\\verb| |\\verb|Cyclic|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|4|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group|\\verb| |\\verb|and|\\verb| |\\verb|a|\\verb| |\\verb|normal|\\verb| |\\verb|subgroup|\\verb| |\\verb|of|\\verb| |\\verb|Quaternion|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|8|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group.|\\)\n\n\n\\(\\displaystyle \\verb|Subgroup|\\verb| |\\verb|generated|\\verb| |\\verb|by|\\verb| |\\verb|[(1,3)(2,4)(5,7)(6,8),|\\verb| |\\verb|(1,2,3,4)(5,6,7,8)]|\\verb| |\\verb|of|\\verb| |\\verb|(Quaternion|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|8|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group)|\\verb| |\\verb|is|\\verb| |\\verb|isomorphic|\\verb| |\\verb|to|\\verb| |\\verb|Cyclic|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|4|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group|\\verb| |\\verb|and|\\verb| |\\verb|a|\\verb| |\\verb|normal|\\verb| |\\verb|subgroup|\\verb| |\\verb|of|\\verb| |\\verb|Quaternion|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|8|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group.|\\)\n\n\n\\(\\displaystyle \\verb|Subgroup|\\verb| |\\verb|generated|\\verb| |\\verb|by|\\verb| |\\verb|[(1,3)(2,4)(5,7)(6,8),|\\verb| |\\verb|(1,6,3,8)(2,5,4,7)]|\\verb| |\\verb|of|\\verb| |\\verb|(Quaternion|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|8|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group)|\\verb| |\\verb|is|\\verb| |\\verb|isomorphic|\\verb| |\\verb|to|\\verb| |\\verb|Cyclic|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|4|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group|\\verb| |\\verb|and|\\verb| |\\verb|a|\\verb| |\\verb|normal|\\verb| |\\verb|subgroup|\\verb| |\\verb|of|\\verb| |\\verb|Quaternion|\\verb| |\\verb|group|\\verb| |\\verb|of|\\verb| |\\verb|order|\\verb| |\\verb|8|\\verb| |\\verb|as|\\verb| |\\verb|a|\\verb| |\\verb|permutation|\\verb| |\\verb|group.|\\)\n\n\n\n\n\nSymmetric groups\nWe present symmetric groups of different orders along with their properties.\n\nDefinitions\n\n# S2 elements\n\nS2 = SymmetricGroup(2)\nS2.list()\n\n\\(\\displaystyle \\left[1, (1,2)\\right]\\)\n\n\n\n# S3 elements\n\nS3 = SymmetricGroup(3)\nS3.list()\n\n\\(\\displaystyle \\left[1, (1,3,2), (1,2,3), (2,3), (1,3), (1,2)\\right]\\)\n\n\n\n# S4 elements\n\nS4 = SymmetricGroup(4)\nS4.list()\n\n\\(\\displaystyle \\left[1, (1,3)(2,4), (1,4)(2,3), (1,2)(3,4), (2,3,4), (1,3,2), (1,4,3), (1,2,4), (2,4,3), (1,3,4), (1,4,2), (1,2,3), (3,4), (1,3,2,4), (1,4,2,3), (1,2), (2,3), (1,3,4,2), (1,4), (1,2,4,3), (2,4), (1,3), (1,4,3,2), (1,2,3,4)\\right]\\)\n\n\n\n# S5 elements\n\nS5 = SymmetricGroup(5)\nS5.list()\n\n\\(\\displaystyle \\left[1, (1,5,4,3,2), (1,2), (1,4,2,5,3), (1,3,5,2,4), (2,5,4,3), (1,5,3)(2,4), (1,2,5,4,3), (1,4)(2,3,5), (1,3,4,5), (2,4)(3,5), (1,5,2,3,4), (1,2,4)(3,5), (1,4,5), (1,3,2), (2,3,4,5), (1,5), (1,2,3,4,5), (1,4,3,2), (1,3)(2,5,4), (3,4), (1,5,4,2), (1,2)(3,4), (1,4)(2,5,3), (1,3)(2,4,5), (2,5,4), (1,5,3,2,4), (1,2,5,4), (1,4,5,2,3), (1,3,5), (2,4,5,3), (1,5,2,3), (1,2,4,5,3), (1,4,3,5), (1,3,4,2), (2,3,5), (1,5)(3,4), (1,2,3,5), (1,4,2), (1,3,2,5,4), (3,5,4), (1,5,3,4,2), (1,2)(3,5,4), (1,4)(2,5), (1,3,2,4,5), (2,5,3,4), (1,5,2,4), (1,2,5,3,4), (1,4,5)(2,3), (1,3), (2,4,5), (1,5)(2,3), (1,2,4,5), (1,4,3), (1,3,5,4,2), (2,3), (1,5,4,3), (1,2,3), (1,4,2)(3,5), (1,3,4)(2,5), (4,5), (1,5,3,2), (1,2)(4,5), (1,4,3)(2,5), (1,3,5)(2,4), (2,5,3), (1,5,2,4,3), (1,2,5,3), (1,4,2,3,5), (1,3,4), (2,4,3,5), (1,5)(2,3,4), (1,2,4,3,5), (1,4), (1,3,2)(4,5), (2,3,4), (1,5,4), (1,2,3,4), (1,4,5,3,2), (1,3)(2,5), (3,4,5), (1,5,2), (1,2)(3,4,5), (1,4,3,2,5), (1,3)(2,4), (2,5), (1,5)(2,4,3), (1,2,5), (1,4,2,3), (1,3,5,4), (2,4,3), (1,5,4,2,3), (1,2,4,3), (1,4)(3,5), (1,3,4,5,2), (2,3,5,4), (1,5,3,4), (1,2,3,5,4), (1,4,5,2), (1,3,2,5), (3,5), (1,5,2)(3,4), (1,2)(3,5), (1,4,2,5), (1,3,2,4), (2,5)(3,4), (1,5)(2,4), (1,2,5)(3,4), (1,4)(2,3), (1,3)(4,5), (2,4), (1,5,4)(2,3), (1,2,4), (1,4,5,3), (1,3,5,2), (2,3)(4,5), (1,5,3), (1,2,3)(4,5), (1,4,3,5,2), (1,3,4,2,5)\\right]\\)\n\n\n\n# S6 elements\n\nS6 = SymmetricGroup(6)\nS6.list()\n\n\\(\\displaystyle \\left[1, (1,6,5,4,3,2), (1,2), (1,5,3)(2,6,4), (1,4)(2,5)(3,6), (1,3,5)(2,4,6), (2,6,5,4,3), (1,6,4,2,5,3), (1,2,6,5,4,3), (1,5,2,4)(3,6), (1,4,6,2,3,5), (1,3,4,5,6), (2,5,3,6,4), (1,6,3,5,2,4), (1,2,5,3,6,4), (1,5)(2,3,4,6), (1,4,5,6), (1,3,2), (2,4,6,3,5), (1,6,2,3,4,5), (1,2,4,6,3,5), (1,5,6), (1,4,3,2), (1,3)(2,6,5,4), (2,3,4,5,6), (1,6), (1,2,3,4,5,6), (1,5,4,3,2), (1,4,2,6,5,3), (1,3,6,4)(2,5), (3,4), (1,6,5,4,2), (1,2)(3,4), (1,5,3,2,6,4), (1,4,6,3)(2,5), (1,3,6,2,4,5), (2,6,5,4), (1,6,4)(2,5,3), (1,2,6,5,4), (1,5,2,4,6,3), (1,4,5)(2,3,6), (1,3,5,6), (2,5,3)(4,6), (1,6,3)(2,4,5), (1,2,5,3)(4,6), (1,5)(2,3,6), (1,4,3,5,6), (1,3,4,2), (2,4,5)(3,6), (1,6,2,3,5), (1,2,4,5)(3,6), (1,5,6)(3,4), (1,4,2), (1,3,2,6,5,4), (2,3,5,6), (1,6)(3,4), (1,2,3,5,6), (1,5,4,2), (1,4)(2,6,5,3), (1,3)(2,5)(4,6), (3,5,4), (1,6,5,3,4,2), (1,2)(3,5,4), (1,5,2,6,4), (1,4,6,3,2,5), (1,3)(2,4,5,6), (2,6,5,3,4), (1,6,4)(2,5), (1,2,6,5,3,4), (1,5)(2,4,6,3), (1,4,5,6,2,3), (1,3,6), (2,5)(4,6), (1,6,3,2,4,5), (1,2,5)(4,6), (1,5,6,2,3), (1,4,3,6), (1,3,5,4,2), (2,4,5,6,3), (1,6,2,3), (1,2,4,5,6,3), (1,5,4,3,6), (1,4,2)(3,5), (1,3,4)(2,6,5), (2,3,6), (1,6)(3,5,4), (1,2,3,6), (1,5,3,4,2), (1,4)(2,6,5), (1,3,2,5)(4,6), (3,6,5,4), (1,6,4,2)(3,5), (1,2)(3,6,5,4), (1,5,2,6,3,4), (1,4,6,2,5), (1,3,2,4,5,6), (2,6,4)(3,5), (1,6,3,4)(2,5), (1,2,6,4)(3,5), (1,5)(2,4,6), (1,4,5,6)(2,3), (1,3), (2,5)(3,4,6), (1,6,2,4,5), (1,2,5)(3,4,6), (1,5,6)(2,3), (1,4,3), (1,3,6,5,4,2), (2,4,5,6), (1,6)(2,3), (1,2,4,5,6), (1,5,4,3), (1,4,2)(3,6,5), (1,3,5,2,6,4), (2,3), (1,6,5,4,3), (1,2,3), (1,5,3,6,4,2), (1,4)(2,6,3,5), (1,3,4,6,2,5), (4,5), (1,6,5,3,2), (1,2)(4,5), (1,5,2,6,4,3), (1,4,2,5)(3,6), (1,3,5,6,2,4), (2,6,5,3), (1,6,4,3)(2,5), (1,2,6,5,3), (1,5)(2,4)(3,6), (1,4)(2,3,5,6), (1,3,4,6), (2,5)(3,6,4), (1,6,3,5)(2,4), (1,2,5)(3,6,4), (1,5,6,2,3,4), (1,4,6), (1,3,2)(4,5), (2,4)(3,5,6), (1,6,2,3,4), (1,2,4)(3,5,6), (1,5,4,6), (1,4,5,3,2), (1,3)(2,6,5), (2,3,4,6), (1,6)(4,5), (1,2,3,4,6), (1,5,3,2), (1,4,3)(2,6,5), (1,3,6,4,2,5), (3,4,5), (1,6,5,2), (1,2)(3,4,5), (1,5)(2,6,4,3), (1,4,2,5,6,3), (1,3,6,2,4), (2,6,5), (1,6,4,3,2,5), (1,2,6,5), (1,5,6,3)(2,4), (1,4)(2,3,6), (1,3,5,4,6), (2,5,6,4,3), (1,6,3)(2,4), (1,2,5,6,4,3), (1,5,4)(2,3,6), (1,4,6)(3,5), (1,3,4,5,2), (2,4)(3,6), (1,6,2,3,5,4), (1,2,4)(3,6), (1,5,3,4,6), (1,4,5,2), (1,3,2,6,5), (2,3,5,4,6), (1,6)(3,4,5), (1,2,3,5,4,6), (1,5,2), (1,4,3,2,6,5), (1,3)(2,5,6,4), (3,5), (1,6,5,2)(3,4), (1,2)(3,5), (1,5)(2,6,4), (1,4)(2,5,6,3), (1,3)(2,4,6), (2,6,5)(3,4), (1,6,4,2,5), (1,2,6,5)(3,4), (1,5,6,3,2,4), (1,4,6,2,3), (1,3,6)(4,5), (2,5,6,4), (1,6,3,2,4), (1,2,5,6,4), (1,5,4,6,2,3), (1,4,5,3,6), (1,3,5,2), (2,4,6,3), (1,6,2,3)(4,5), (1,2,4,6,3), (1,5,3,6), (1,4,3,5,2), (1,3,4,2,6,5), (2,3,6)(4,5), (1,6)(3,5), (1,2,3,6)(4,5), (1,5,2)(3,4), (1,4,2,6,5), (1,3,2,5,6,4), (3,6,5), (1,6,4,3,5,2), (1,2)(3,6,5), (1,5)(2,6,3,4), (1,4)(2,5,6), (1,3,2,4,6), (2,6,4,3,5), (1,6,3,4,2,5), (1,2,6,4,3,5), (1,5,6,2,4), (1,4,6)(2,3), (1,3)(4,5), (2,5,6,3,4), (1,6,2,4), (1,2,5,6,3,4), (1,5,4,6)(2,3), (1,4,5,3), (1,3,6,5,2), (2,4,6), (1,6)(2,3)(4,5), (1,2,4,6), (1,5,3), (1,4,3,6,5,2), (1,3,5)(2,6,4), (2,3)(4,5), (1,6,5,3), (1,2,3)(4,5), (1,5,2)(3,6,4), (1,4,2,6,3,5), (1,3,4)(2,5,6), (4,6,5), (1,6,4,5,3,2), (1,2)(4,6,5), (1,5,2,6,3), (1,4,3,6,2,5), (1,3,5,6)(2,4), (2,6,4,5,3), (1,6,3)(2,5), (1,2,6,4,5,3), (1,5)(2,4,3,6), (1,4,2,3,5,6), (1,3,4), (2,5)(3,6), (1,6,2,4,3,5), (1,2,5)(3,6), (1,5,6)(2,3,4), (1,4), (1,3,2)(4,6,5), (2,4,3,5,6), (1,6)(2,3,4), (1,2,4,3,5,6), (1,5,4), (1,4,6,5,3,2), (1,3)(2,6,4,5), (2,3,4), (1,6,5,4), (1,2,3,4), (1,5,3,2)(4,6), (1,4,5,2,6,3), (1,3,6,2,5), (3,4,6,5), (1,6,4,5,2), (1,2)(3,4,6,5), (1,5)(2,6,3), (1,4,3)(2,5,6), (1,3,6)(2,4), (2,6,4,5), (1,6,3,2,5), (1,2,6,4,5), (1,5,6,2,4,3), (1,4,2,3,6), (1,3,5,4), (2,5,6,3), (1,6,2,4,3), (1,2,5,6,3), (1,5,4,2,3,6), (1,4)(3,5), (1,3,4,6,5,2), (2,4,3,6), (1,6)(2,3,5,4), (1,2,4,3,6), (1,5,3,4), (1,4,6,5,2), (1,3,2,6,4,5), (2,3,5,4), (1,6,5,3,4), (1,2,3,5,4), (1,5,2)(4,6), (1,4,5)(2,6,3), (1,3)(2,5,6), (3,5)(4,6), (1,6,3,4,5,2), (1,2)(3,5)(4,6), (1,5)(2,6), (1,4,3,2,5,6), (1,3)(2,4), (2,6,3,4,5), (1,6,2,5), (1,2,6,3,4,5), (1,5,6)(2,4,3), (1,4,2,3), (1,3,6,5,4), (2,5,6), (1,6)(2,4,3), (1,2,5,6), (1,5,4,2,3), (1,4)(3,6,5), (1,3,5,2)(4,6), (2,4,3), (1,6,5,4,2,3), (1,2,4,3), (1,5,3,6,4), (1,4,6,3,5,2), (1,3,4,5)(2,6), (2,3,6,5,4), (1,6,4)(3,5), (1,2,3,6,5,4), (1,5,2)(3,4,6), (1,4,5)(2,6), (1,3,2,5,6), (3,6,4,5), (1,6,3,5,2), (1,2)(3,6,4,5), (1,5)(2,6)(3,4), (1,4,2,5,6), (1,3,2,4), (2,6,3,5), (1,6,2,5)(3,4), (1,2,6,3,5), (1,5,6)(2,4), (1,4)(2,3), (1,3)(4,6,5), (2,5,6)(3,4), (1,6)(2,4), (1,2,5,6)(3,4), (1,5,4)(2,3), (1,4,6,5,3), (1,3,6,4,5,2), (2,4), (1,6,5,4)(2,3), (1,2,4), (1,5,3)(4,6), (1,4,5,2)(3,6), (1,3,5)(2,6), (2,3)(4,6,5), (1,6,4,5,3), (1,2,3)(4,6,5), (1,5,2)(3,6), (1,4,3,5)(2,6), (1,3,4,2,5,6), (5,6), (1,6,4,3,2), (1,2)(5,6), (1,5,4,2,6,3), (1,4)(2,5,3,6), (1,3,5,2,4,6), (2,6,4,3), (1,6,3)(2,5,4), (1,2,6,4,3), (1,5,3,6,2,4), (1,4,6)(2,3,5), (1,3,4,5), (2,5,4)(3,6), (1,6,2,4)(3,5), (1,2,5,4)(3,6), (1,5,2,3,4,6), (1,4,5), (1,3,2)(5,6), (2,4,6)(3,5), (1,6)(2,3,4,5), (1,2,4,6)(3,5), (1,5), (1,4,3,2)(5,6), (1,3)(2,6,4), (2,3,4,5), (1,6,5), (1,2,3,4,5), (1,5,6,4,3,2), (1,4,2,6,3), (1,3,6,2,5,4), (3,4)(5,6), (1,6,4,2), (1,2)(3,4)(5,6), (1,5,4)(2,6,3), (1,4,6,2,5,3), (1,3,6)(2,4,5), (2,6,4), (1,6,3,2,5,4), (1,2,6,4), (1,5,3)(2,4,6), (1,4,5,2,3,6), (1,3,5), (2,5,4,6,3), (1,6,2,4,5,3), (1,2,5,4,6,3), (1,5,2,3,6), (1,4,3,5), (1,3,4,2)(5,6), (2,4,5,3,6), (1,6)(2,3,5), (1,2,4,5,3,6), (1,5)(3,4), (1,4,2)(5,6), (1,3,2,6,4), (2,3,5), (1,6,5)(3,4), (1,2,3,5), (1,5,6,4,2), (1,4)(2,6,3), (1,3)(2,5,4,6), (3,5,6,4), (1,6,3,4,2), (1,2)(3,5,6,4), (1,5,4)(2,6), (1,4,6)(2,5,3), (1,3)(2,4,5), (2,6,3,4), (1,6,2,5,4), (1,2,6,3,4), (1,5,3,2,4,6), (1,4,5,2,3), (1,3,6,5), (2,5,4,6), (1,6)(2,4,5,3), (1,2,5,4,6), (1,5,2,3), (1,4,3,6,5), (1,3,5,6,4,2), (2,4,5,3), (1,6,5,2,3), (1,2,4,5,3), (1,5)(3,6,4), (1,4,2)(3,5,6), (1,3,4)(2,6), (2,3,6,5), (1,6,4,3,5), (1,2,3,6,5), (1,5,6,3,4,2), (1,4)(2,6), (1,3,2,5,4,6), (3,6,4), (1,6,3,5,4,2), (1,2)(3,6,4), (1,5,3,4)(2,6), (1,4,6)(2,5), (1,3,2,4,5), (2,6,3,5,4), (1,6,2,5,3,4), (1,2,6,3,5,4), (1,5,2,4,6), (1,4,5)(2,3), (1,3)(5,6), (2,5,3,4,6), (1,6)(2,4,5), (1,2,5,3,4,6), (1,5)(2,3), (1,4,3)(5,6), (1,3,6,4,2), (2,4,5), (1,6,5)(2,3), (1,2,4,5), (1,5,6,4,3), (1,4,2)(3,6), (1,3,5,4)(2,6), (2,3)(5,6), (1,6,4,3), (1,2,3)(5,6), (1,5,4,2)(3,6), (1,4)(2,6)(3,5), (1,3,4,6)(2,5), (4,5,6), (1,6,3,2), (1,2)(4,5,6), (1,5,4,3)(2,6), (1,4,2,5,3,6), (1,3,5,2,4), (2,6,3), (1,6,2,5,4,3), (1,2,6,3), (1,5,3,6)(2,4), (1,4)(2,3,5), (1,3,4,6,5), (2,5,4,3,6), (1,6)(2,4)(3,5), (1,2,5,4,3,6), (1,5,2,3,4), (1,4,6,5), (1,3,2)(4,5,6), (2,4)(3,5), (1,6,5,2,3,4), (1,2,4)(3,5), (1,5)(4,6), (1,4,5,6,3,2), (1,3)(2,6), (2,3,4,6,5), (1,6,4,5), (1,2,3,4,6,5), (1,5,6,3,2), (1,4,3)(2,6), (1,3,6)(2,5,4), (3,4,5,6), (1,6,2), (1,2)(3,4,5,6), (1,5,4,3,2,6), (1,4,2,5,3), (1,3,6,5,2,4), (2,6), (1,6)(2,5,4,3), (1,2,6), (1,5,3)(2,4), (1,4)(2,3,6,5), (1,3,5)(4,6), (2,5,4,3), (1,6,5,3)(2,4), (1,2,5,4,3), (1,5,2,3,6,4), (1,4,6,3,5), (1,3,4,5,6,2), (2,4)(3,6,5), (1,6,4)(2,3,5), (1,2,4)(3,6,5), (1,5)(3,4,6), (1,4,5,6,2), (1,3,2,6), (2,3,5)(4,6), (1,6,3,4,5), (1,2,3,5)(4,6), (1,5,6,2), (1,4,3,2,6), (1,3)(2,5,4), (3,5,6), (1,6,2)(3,4), (1,2)(3,5,6), (1,5,4,2,6), (1,4)(2,5,3), (1,3)(2,4,6,5), (2,6)(3,4), (1,6)(2,5,4), (1,2,6)(3,4), (1,5,3,2,4), (1,4,6,5,2,3), (1,3,6,4,5), (2,5,4), (1,6,5,3,2,4), (1,2,5,4), (1,5,2,3)(4,6), (1,4,5)(3,6), (1,3,5,6,2), (2,4,6,5,3), (1,6,4,5,2,3), (1,2,4,6,5,3), (1,5)(3,6), (1,4,3,5,6,2), (1,3,4,2,6), (2,3,6,4,5), (1,6,3,5), (1,2,3,6,4,5), (1,5,6,2)(3,4), (1,4,2,6), (1,3,2,5,4), (3,6), (1,6,2)(3,5,4), (1,2)(3,6), (1,5,3,4,2,6), (1,4)(2,5), (1,3,2,4,6,5), (2,6)(3,5,4), (1,6)(2,5,3,4), (1,2,6)(3,5,4), (1,5,2,4), (1,4,6,5)(2,3), (1,3)(4,5,6), (2,5,3,4), (1,6,5,2,4), (1,2,5,3,4), (1,5)(2,3)(4,6), (1,4,5,6,3), (1,3,6,2), (2,4,6,5), (1,6,4,5)(2,3), (1,2,4,6,5), (1,5,6,3), (1,4,3,6,2), (1,3,5,4,2,6), (2,3)(4,5,6), (1,6,3), (1,2,3)(4,5,6), (1,5,4,3,6,2), (1,4,2,6)(3,5), (1,3,4)(2,5), (4,6), (1,6,3,2)(4,5), (1,2)(4,6), (1,5,3)(2,6), (1,4,3,6)(2,5), (1,3,5)(2,4), (2,6,3)(4,5), (1,6,2,5,3), (1,2,6,3)(4,5), (1,5,2,4,3,6), (1,4,2,3,5), (1,3,4)(5,6), (2,5,3,6), (1,6)(2,4,3,5), (1,2,5,3,6), (1,5)(2,3,4), (1,4)(5,6), (1,3,2)(4,6), (2,4,3,5), (1,6,5)(2,3,4), (1,2,4,3,5), (1,5,6,4), (1,4,6,3,2), (1,3)(2,6)(4,5), (2,3,4)(5,6), (1,6,4), (1,2,3,4)(5,6), (1,5,4,6,3,2), (1,4,5,3)(2,6), (1,3,6)(2,5), (3,4,6), (1,6,2)(4,5), (1,2)(3,4,6), (1,5,3,2,6), (1,4,3)(2,5), (1,3,6,5)(2,4), (2,6)(4,5), (1,6)(2,5,3), (1,2,6)(4,5), (1,5,2,4,3), (1,4,2,3,6,5), (1,3,5,6,4), (2,5,3), (1,6,5,2,4,3), (1,2,5,3), (1,5)(2,3,6,4), (1,4)(3,5,6), (1,3,4,6,2), (2,4,3,6,5), (1,6,4,2,3,5), (1,2,4,3,6,5), (1,5,6,3,4), (1,4,6,2), (1,3,2,6)(4,5), (2,3,5,6,4), (1,6,3,4), (1,2,3,5,6,4), (1,5,4,6,2), (1,4,5,3,2,6), (1,3)(2,5), (3,5,4,6), (1,6,2)(3,4,5), (1,2)(3,5,4,6), (1,5,2,6), (1,4,3,2,5), (1,3)(2,4)(5,6), (2,6)(3,4,5), (1,6)(2,5), (1,2,6)(3,4,5), (1,5)(2,4,3), (1,4,2,3)(5,6), (1,3,6,4), (2,5), (1,6,5)(2,4,3), (1,2,5), (1,5,6,4,2,3), (1,4)(3,6), (1,3,5,4,6,2), (2,4,3)(5,6), (1,6,4,2,3), (1,2,4,3)(5,6), (1,5,4)(3,6), (1,4,6,2)(3,5), (1,3,4,5,2,6), (2,3,6,4), (1,6,3,5,4), (1,2,3,6,4), (1,5,3,4,6,2), (1,4,5,2,6), (1,3,2,5), (3,6)(4,5), (1,6,2)(3,5), (1,2)(3,6)(4,5), (1,5,2,6)(3,4), (1,4,2,5), (1,3,2,4)(5,6), (2,6)(3,5), (1,6)(2,5)(3,4), (1,2,6)(3,5), (1,5)(2,4), (1,4)(2,3)(5,6), (1,3)(4,6), (2,5)(3,4), (1,6,5)(2,4), (1,2,5)(3,4), (1,5,6,4)(2,3), (1,4,6,3), (1,3,6,2)(4,5), (2,4)(5,6), (1,6,4)(2,3), (1,2,4)(5,6), (1,5,4,6,3), (1,4,5,3,6,2), (1,3,5,2,6), (2,3)(4,6), (1,6,3)(4,5), (1,2,3)(4,6), (1,5,3,6,2), (1,4,3,5,2,6), (1,3,4,2,5)\\right]\\)\n\n\n\n\nMultiplication\n\n# S4 elements multiplication\n\nP = S4[5]\nQ = S4[12]\nprint(f'P = {P}, Q = {Q}')\nprint(f'P * Q = {Q * P}')\n\nP = (1,3,2), Q = (3,4)\nP * Q = (1,3,4,2)\n\n\n\n\nSignature\n\n# S4 elements signature\n\nP = S4[16]\nQ = S4[2]\nprint(f'P = {P}, Q = {Q}')\nprint(f'sgn(P) = {P.sign()}')\nprint(f'sgn(Q) = {Q.sign()}')\n\nP = (2,3), Q = (1,4)(2,3)\nsgn(P) = -1\nsgn(Q) = 1\n\n\n\n\nAlternating groups\n\n# A4 elements\n\nA4 = AlternatingGroup(4)\nA4.list()\n\n\\(\\displaystyle \\left[1, (1,2)(3,4), (1,3)(2,4), (1,4)(2,3), (2,3,4), (1,2,4), (1,3,2), (1,4,3), (2,4,3), (1,2,3), (1,3,4), (1,4,2)\\right]\\)\n\n\n\n# A4 subgroup of S4\n\nassert A4.is_subgroup(S4)\n\n\n# A4 elements signature\n\nassert all(e.sign() == 1 for e in A4)\n\n\n# A4 order\n\nassert A4.order() == S4.order() / 2\n\n\n\nCayley’s theorem\nEvery finite group of order \\(N\\) is isomorphic to a subgroup of \\(S_N\\).\n\n# S2 subgroups\n\nassert Z2.is_subgroup(S2)\n\n\n# S3 subgroups\n\nassert Z3.is_subgroup(S3)\n\n\n# S4 subgroups\n\nassert Z4.is_subgroup(S4)\nassert K4G.is_subgroup(S4)\n\n\n# S5 subgroups\n\nassert Z5.is_subgroup(S5)\n\n\n# S6 subgroups\n\nassert Z6.is_subgroup(S6)\nassert Z2xZ3.is_subgroup(S6)\nassert S3.is_subgroup(S6)\n\n\n\n\nFree groups\nA free group \\(G\\) is defined as follows:\n\n\\(X=\\left\\{g_1, g_2, \\ldots, g_n\\right\\}\\) a subset of \\(G\\)\n\\(g \\in G - \\{e\\}\\) can be uniquely written as \\(g=g_{j_1}^{i_1} g_{j_2}^{i_2} \\cdots g_{j_m}^{i_m}\\) with \\(i_k \\in \\mathbb{Z} \\backslash\\{0\\}\\) and \\(g_{j_i} \\neq g_{j_{i+1}}\\)\n\nA relation \\(r\\) is a constraint \\(r \\equiv g_{j_2}^{i_1} g_{j_2}^{i_2} \\cdots g_{j_m}^{i_m}=e\\).\nThe presentation of the group \\(G\\) is defined as \\(\\left\\langle g_1, g_2, \\ldots, g_n \\mid r_1, r_2, \\ldots, r_m\\right\\rangle\\).\n\n# G = &lt;a&gt;\n\nG.&lt;a&gt; = FreeGroup(1)\nG\n\n\\(\\displaystyle \\verb|Free|\\verb| |\\verb|Group|\\verb| |\\verb|on|\\verb| |\\verb|generators|\\verb| |\\verb|{a}|\\)\n\n\n\n# G = &lt;a, b&gt;\n\nG.&lt;a, b&gt; = FreeGroup(2)\nG\n\n\\(\\displaystyle \\verb|Free|\\verb| |\\verb|Group|\\verb| |\\verb|on|\\verb| |\\verb|generators|\\verb| |\\verb|{a,|\\verb| |\\verb|b}|\\)\n\n\n\n# G = &lt;a|a^n&gt;\n\nn = 3\nF.&lt;a&gt; = FreeGroup(1)\nG = F / [a^n]\nG\n\n\\(\\displaystyle \\langle a \\mid a^{3}\\rangle\\)\n\n\n\n# G, Z3 isomorphism\n\nassert Z3.is_isomorphic(G.as_permutation_group())\n\n\n# G = &lt;a,b| a*b*a^(-1)*b^(-1)&gt;\n\nF.&lt;a, b&gt; = FreeGroup(2)\nG = FreeGroup(['a', 'b']) / [a*b*a^(-1)*b^(-1)]\nG\n\n\\(\\displaystyle \\langle a, b \\mid a\\cdot b\\cdot a^{-1}\\cdot b^{-1}\\rangle\\)\n\n\n\n# G = &lt;r,f| r^4,f^2,rfrf&gt;\n\nF.&lt;r, f&gt; = FreeGroup(2)\nG = F / [r^4, f^2, r*f*r*f]\nG\n\n\\(\\displaystyle \\langle r, f \\mid r^{4} , f^{2} , (r\\cdot f)^{2}\\rangle\\)\n\n\n\n# G, D4 ismoorphism\n\nassert D4.is_isomorphic(G.as_permutation_group())\n\n\n\n\nLie groups\nA Lie group is a continuous group whose group manifold is differentiable. The group \\(\\operatorname{GL}(n, \\mathbb{C})\\) and its subgroups are called matrix Lie groups."
  },
  {
    "objectID": "presentations/symbolic_computation_in_physics_with_python_1/index.html#main-libraries",
    "href": "presentations/symbolic_computation_in_physics_with_python_1/index.html#main-libraries",
    "title": "Symbolic Computation in Theoretical Physics with Python",
    "section": "Main libraries",
    "text": "Main libraries\n\nSageMath A comprehensive system for algebra, calculus, and numerical analysis. It’s widely used for symbolic computation in physics.\nCadabra A tool for tensor calculations, especially in general relativity. It simplifies complex tensor equations.\nEinsteinPy A Python library for general relativity, with tools to work with Einstein’s equations and relativistic phenomena."
  },
  {
    "objectID": "presentations/symbolic_computation_in_physics_with_python_1/index.html#other-libraries",
    "href": "presentations/symbolic_computation_in_physics_with_python_1/index.html#other-libraries",
    "title": "Symbolic Computation in Theoretical Physics with Python",
    "section": "Other libraries",
    "text": "Other libraries\n\nPyRate\n\nA Python library for the computation of renormalization group equations for general, non-supersymmetric gauge theories.\n\nmunuSSM\n\nA Python package for studying the phenomenology of the μ-from-ν Supersymmetric Standard Model (μνSSM).\n\nWilson\n\nA framework for effective field theory calculations in lattice gauge theory.\n\nFlavio\n\nA Python library focused on flavor physics, studying mesons and baryons.\n\nTorchPhysics\n\nA Python library of deep learning methods for solving differential equations.\n\nPyFeyn\n\nA Python library for generating and visualizing Feynman diagrams, used in quantum field theory."
  }
]